#include <iostream>
#include <gl/glew.h> // 필요한 헤더파일 include
#include <gl/freeglut.h>
#include <gl/freeglut_ext.h>
#include <gl/glm/glm.hpp>
#include <gl/glm/ext.hpp>
#include <gl/glm/gtc/matrix_transform.hpp>
#include <fstream>

using namespace std;

typedef enum H_Move
{
	M_left = 1,
	M_right = 2,
	M_up = 3,
	M_down = 4
};

GLvoid drawScene(GLvoid);
GLvoid Reshape(int w, int h);
GLvoid Mouse(int button, int state, int x, int y);
void Keyboard(unsigned char key, int x, int y);
void Timer(int value);
GLchar* filetobuf(const GLchar* filename);

// 세이더 파일 읽기
GLchar* filetobuf(const GLchar* filename)
{
	cout << "정상" << endl;

	ifstream readFile;             //읽을 목적의 파일 선언
	GLchar tmp[256];
	GLchar str[512] = { NULL };

	readFile.open(filename);    //파일 열기
	if (readFile.is_open())    //파일이 열렸는지 확인
	{
		while (!readFile.eof())    //파일 끝까지 읽었는지 확인
		{
			readFile.getline(tmp, 256);    //한줄씩 읽어오기
			if (str == NULL)
			{
				strcpy_s(str, tmp);
				strcat_s(str, "\n");
			}
			else
			{
				strcat_s(str, tmp);
				strcat_s(str, "\n");
			}
		}
		cout << "정상2" << endl;
	}
	readFile.close();    //파일 닫기

	cout << str << endl;

	return str;
}
// 세이더 생성
GLuint make_shaderProgram()
{
	GLint result;
	GLchar errorLog[512];

	GLchar* vertexsource;
	vertexsource = filetobuf("vertex_view.glsl");

	//--- 버텍스 세이더 읽어 저장하고 컴파일 하기
	GLuint vertexShader = glCreateShader(GL_VERTEX_SHADER);
	glShaderSource(vertexShader, 1, &vertexsource, NULL);
	glCompileShader(vertexShader);
	glGetShaderiv(vertexShader, GL_COMPILE_STATUS, &result);
	if (!result)
	{
		glGetShaderInfoLog(vertexShader, 512, NULL, errorLog);
		cerr << "ERROR: vertex shader 컴파일 실패\n" << errorLog << endl;
		return false;
	}

	GLchar* fragmentsource;
	fragmentsource = filetobuf("fragment_view.glsl");

	//--- 프래그먼트 세이더 읽어 저장하고 컴파일하기
	GLuint fragmentShader = glCreateShader(GL_FRAGMENT_SHADER);
	glShaderSource(fragmentShader, 1, &fragmentsource, NULL);
	glCompileShader(fragmentShader);
	glGetShaderiv(fragmentShader, GL_COMPILE_STATUS, &result);
	if (!result)
	{
		glGetShaderInfoLog(fragmentShader, 512, NULL, errorLog);
		cerr << "ERROR: fragment shader 컴파일 실패\n" << errorLog << endl;
		return false;
	}

	GLuint ShaderProgramID = glCreateProgram(); //--- 세이더 프로그램 만들기
	glAttachShader(ShaderProgramID, vertexShader); //--- 세이더 프로그램에 버텍스 세이더 붙이기
	glAttachShader(ShaderProgramID, fragmentShader); //--- 세이더 프로그램에 프래그먼트 세이더 붙이기
	glLinkProgram(ShaderProgramID); //--- 세이더 프로그램 링크하기
	glDeleteShader(vertexShader); //--- 세이더 프로그램에 링크하여 세이더 객체 자체는 삭제 가능
	glDeleteShader(fragmentShader);

	glGetProgramiv(ShaderProgramID, GL_LINK_STATUS, &result); // ---세이더가 잘 연결되었는지 체크하기
	if (!result)
	{
		glGetProgramInfoLog(ShaderProgramID, 512, NULL, errorLog);
		cerr << "ERROR: shader program 연결 실패\n" << errorLog << endl;
		return false;
	}
	glUseProgram(ShaderProgramID); //--- 만들어진 세이더 프로그램 사용하기
	//--- 여러 개의 세이더프로그램 만들 수 있고, 특정 프로그램을 사용하려면
	//--- glUseProgram 함수를 호출하여 사용 할 특정 프로그램을 지정한다.
	//--- 사용하기 직전에 호출할 수 있다.
	return ShaderProgramID;
}

GLfloat Stage[30][3] = {
	// 정면부터 반시계
	{0.5f,-0.5f,0.0f},
	{0.0f,-0.5f,0.5f},
	{0.0f,0.5f,0.5f},

	{0.5f,0.5f,0.0f},
	{0.5f,-0.5f,0.0f},
	{0.0f,0.5f,0.5f},

	{0.0f,-0.5f,-0.5f},
	{0.5f,-0.5f,0.0f},
	{0.5f,0.5f,0.0f},

	{0.0f,0.5f,-0.5f},
	{0.0f,-0.5f,-0.5f},
	{0.5f,0.5f,0.0f},

	{-0.5f,-0.5f,0.0f},
	{0.0f,-0.5f,-0.5f},
	{0.0f,0.5f,-0.5f},

	{-0.5f,0.5f,0.0f},
	{-0.5f,-0.5f,0.0f},
	{0.0f,0.5f,-0.5f},

	//윗면
	{0.5f,0.5f,0.0f},
	{0.0f,0.5f,0.5f},
	{0.0f,0.5f,-0.5f},

	{0.0f,0.5f,0.5f},
	{-0.5f,0.5f,0.0f},
	{0.0f,0.5f,-0.5f},

	//아랫면
	{0.0f,-0.5f,-0.5f},
	{-0.5f,-0.5f,0.0f},
	{0.0f,-0.5f,0.5f},

	{0.0f,-0.5f,-0.5f},
	{0.0f,-0.5f,0.5f},
	{0.5f,-0.5f,0.0f}
};
GLfloat StageC[30][3] = {
	{0.6f,0.1f,0.4f},
	{0.0f,0.0f,1.0f},
	{0.6f,0.2f,0.8f},

	{0.6f,0.1f,0.4f},
	{0.6f,0.2f,0.8f},
	{0.6f,0.1f,0.4f},

	{0.6f,0.1f,0.4f},
	{0.6f,0.2f,0.8f},
	{0.5f,0.0f,0.5f},

	{0.6f,0.1f,0.4f},
	{0.5f,0.0f,0.5f},
	{0.0f,0.5f,0.5f},

	{0.0f,0.5f,0.5f},
	{0.0f,1.0f,0.0f},
	{0.5f,0.0f,0.5f},

	{0.0f,0.5f,0.5f},
	{0.5f,0.0f,0.5f},
	{1.0f,0.0f,0.0f},

	{0.0f,0.5f,0.5f},
	{1.0f,0.0f,0.0f},
	{0.6f,0.1f,0.4f},

	{0.0f,0.5f,0.5f},
	{0.6f,0.1f,0.4f},
	{0.6f,0.1f,0.4f},

	{0.5f,0.0f,0.5f},
	{0.6f,0.2f,0.8f},
	{0.0f,1.0f,0.0f},

	{0.0f,1.0f,0.0f},
	{0.6f,0.2f,0.8f},
	{0.0f,0.0f,1.0f},
};

GLfloat StageF[6][3] = {
	{-0.5f,0.5f,0.0f},
	{-0.5f,-0.5f,0.0f},
	{0.0f,-0.5f,0.5f},

	{-0.5f,0.5f,0.0f},
	{0.0f,-0.5f,0.5f},
	{0.0f,0.5f,0.5f}
};
GLfloat StageFC[6][3] = {
	{1.0f,0.0f,0.0f},
	{0.0f,1.0f,0.0f},
	{0.0f,0.0f,1.0f},

	{1.0f,0.0f,0.0f},
	{0.0f,0.0f,1.0f},
	{0.6f,0.1f,0.4f}
};

GLfloat Head[36][3] = {
	// 정면부터 반시계
	{-0.5f,0.5f,0.0f},
	{-0.5f,-0.5f,0.0f},
	{0.0f,-0.5f,0.5f},

	{-0.5f,0.5f,0.0f},
	{0.0f,-0.5f,0.5f},
	{0.0f,0.5f,0.5f},

	{0.0f,0.5f,0.5f},
	{0.0f,-0.5f,0.5f},
	{0.5f,-0.5f,0.0f},

	{0.0f,0.5f,0.5f},
	{0.5f,-0.5f,0.0f},
	{0.5f,0.5f,0.0f},

	{0.5f,0.5f,0.0f},
	{0.5f,-0.5f,0.0f},
	{0.0f,-0.5f,-0.5f},

	{0.5f,0.5f,0.0f},
	{0.0f,-0.5f,-0.5f},
	{0.0f,0.5f,-0.5f},

	{0.0f,0.5f,-0.5f},
	{0.0f,-0.5f,-0.5f},
	{-0.5f,-0.5f,0.0f},

	{0.0f,0.5f,-0.5f},
	{-0.5f,-0.5f,0.0f},
	{-0.5f,0.5f,0.0f},

	//윗면
	{0.0f,0.5f,-0.5f},
	{0.0f,0.5f,0.5f},
	{0.5f,0.5f,0.0f},

	{0.0f,0.5f,-0.5f},
	{-0.5f,0.5f,0.0f},
	{0.0f,0.5f,0.5f},

	//아랫면
	{0.0f,-0.5f,-0.5f},
	{-0.5f,-0.5f,0.0f},
	{0.0f,-0.5f,0.5f},

	{0.0f,-0.5f,-0.5f},
	{0.0f,-0.5f,0.5f},
	{0.5f,-0.5f,0.0f}
};

GLfloat L_eye[36][3] = {
	// 정면부터 반시계
	{-0.5f,0.5f,0.0f},
	{-0.5f,-0.5f,0.0f},
	{0.0f,-0.5f,0.5f},

	{-0.5f,0.5f,0.0f},
	{0.0f,-0.5f,0.5f},
	{0.0f,0.5f,0.5f},

	{0.0f,0.5f,0.5f},
	{0.0f,-0.5f,0.5f},
	{0.5f,-0.5f,0.0f},

	{0.0f,0.5f,0.5f},
	{0.5f,-0.5f,0.0f},
	{0.5f,0.5f,0.0f},

	{0.5f,0.5f,0.0f},
	{0.5f,-0.5f,0.0f},
	{0.0f,-0.5f,-0.5f},

	{0.5f,0.5f,0.0f},
	{0.0f,-0.5f,-0.5f},
	{0.0f,0.5f,-0.5f},

	{0.0f,0.5f,-0.5f},
	{0.0f,-0.5f,-0.5f},
	{-0.5f,-0.5f,0.0f},

	{0.0f,0.5f,-0.5f},
	{-0.5f,-0.5f,0.0f},
	{-0.5f,0.5f,0.0f},

	//윗면
	{0.0f,0.5f,-0.5f},
	{0.0f,0.5f,0.5f},
	{0.5f,0.5f,0.0f},

	{0.0f,0.5f,-0.5f},
	{-0.5f,0.5f,0.0f},
	{0.0f,0.5f,0.5f},

	//아랫면
	{0.0f,-0.5f,-0.5f},
	{-0.5f,-0.5f,0.0f},
	{0.0f,-0.5f,0.5f},

	{0.0f,-0.5f,-0.5f},
	{0.0f,-0.5f,0.5f},
	{0.5f,-0.5f,0.0f}
};
GLfloat R_eye[36][3] = {
	// 정면부터 반시계
	{-0.5f,0.5f,0.0f},
	{-0.5f,-0.5f,0.0f},
	{0.0f,-0.5f,0.5f},

	{-0.5f,0.5f,0.0f},
	{0.0f,-0.5f,0.5f},
	{0.0f,0.5f,0.5f},

	{0.0f,0.5f,0.5f},
	{0.0f,-0.5f,0.5f},
	{0.5f,-0.5f,0.0f},

	{0.0f,0.5f,0.5f},
	{0.5f,-0.5f,0.0f},
	{0.5f,0.5f,0.0f},

	{0.5f,0.5f,0.0f},
	{0.5f,-0.5f,0.0f},
	{0.0f,-0.5f,-0.5f},

	{0.5f,0.5f,0.0f},
	{0.0f,-0.5f,-0.5f},
	{0.0f,0.5f,-0.5f},

	{0.0f,0.5f,-0.5f},
	{0.0f,-0.5f,-0.5f},
	{-0.5f,-0.5f,0.0f},

	{0.0f,0.5f,-0.5f},
	{-0.5f,-0.5f,0.0f},
	{-0.5f,0.5f,0.0f},

	//윗면
	{0.0f,0.5f,-0.5f},
	{0.0f,0.5f,0.5f},
	{0.5f,0.5f,0.0f},

	{0.0f,0.5f,-0.5f},
	{-0.5f,0.5f,0.0f},
	{0.0f,0.5f,0.5f},

	//아랫면
	{0.0f,-0.5f,-0.5f},
	{-0.5f,-0.5f,0.0f},
	{0.0f,-0.5f,0.5f},

	{0.0f,-0.5f,-0.5f},
	{0.0f,-0.5f,0.5f},
	{0.5f,-0.5f,0.0f}
};
GLfloat Nose[36][3] = {
	// 정면부터 반시계
	{-0.5f,0.5f,0.0f},
	{-0.5f,-0.5f,0.0f},
	{0.0f,-0.5f,0.5f},

	{-0.5f,0.5f,0.0f},
	{0.0f,-0.5f,0.5f},
	{0.0f,0.5f,0.5f},

	{0.0f,0.5f,0.5f},
	{0.0f,-0.5f,0.5f},
	{0.5f,-0.5f,0.0f},

	{0.0f,0.5f,0.5f},
	{0.5f,-0.5f,0.0f},
	{0.5f,0.5f,0.0f},

	{0.5f,0.5f,0.0f},
	{0.5f,-0.5f,0.0f},
	{0.0f,-0.5f,-0.5f},

	{0.5f,0.5f,0.0f},
	{0.0f,-0.5f,-0.5f},
	{0.0f,0.5f,-0.5f},

	{0.0f,0.5f,-0.5f},
	{0.0f,-0.5f,-0.5f},
	{-0.5f,-0.5f,0.0f},

	{0.0f,0.5f,-0.5f},
	{-0.5f,-0.5f,0.0f},
	{-0.5f,0.5f,0.0f},

	//윗면
	{0.0f,0.5f,-0.5f},
	{0.0f,0.5f,0.5f},
	{0.5f,0.5f,0.0f},

	{0.0f,0.5f,-0.5f},
	{-0.5f,0.5f,0.0f},
	{0.0f,0.5f,0.5f},

	//아랫면
	{0.0f,-0.5f,-0.5f},
	{-0.5f,-0.5f,0.0f},
	{0.0f,-0.5f,0.5f},

	{0.0f,-0.5f,-0.5f},
	{0.0f,-0.5f,0.5f},
	{0.5f,-0.5f,0.0f}
};

GLfloat Body[36][3] = {
	// 정면부터 반시계
	{-0.5f,0.5f,0.0f},
	{-0.5f,-0.5f,0.0f},
	{0.0f,-0.5f,0.5f},

	{-0.5f,0.5f,0.0f},
	{0.0f,-0.5f,0.5f},
	{0.0f,0.5f,0.5f},

	{0.0f,0.5f,0.5f},
	{0.0f,-0.5f,0.5f},
	{0.5f,-0.5f,0.0f},

	{0.0f,0.5f,0.5f},
	{0.5f,-0.5f,0.0f},
	{0.5f,0.5f,0.0f},

	{0.5f,0.5f,0.0f},
	{0.5f,-0.5f,0.0f},
	{0.0f,-0.5f,-0.5f},

	{0.5f,0.5f,0.0f},
	{0.0f,-0.5f,-0.5f},
	{0.0f,0.5f,-0.5f},

	{0.0f,0.5f,-0.5f},
	{0.0f,-0.5f,-0.5f},
	{-0.5f,-0.5f,0.0f},

	{0.0f,0.5f,-0.5f},
	{-0.5f,-0.5f,0.0f},
	{-0.5f,0.5f,0.0f},

	//윗면
	{0.0f,0.5f,-0.5f},
	{0.0f,0.5f,0.5f},
	{0.5f,0.5f,0.0f},

	{0.0f,0.5f,-0.5f},
	{-0.5f,0.5f,0.0f},
	{0.0f,0.5f,0.5f},

	//아랫면
	{0.0f,-0.5f,-0.5f},
	{-0.5f,-0.5f,0.0f},
	{0.0f,-0.5f,0.5f},

	{0.0f,-0.5f,-0.5f},
	{0.0f,-0.5f,0.5f},
	{0.5f,-0.5f,0.0f}
};

GLfloat Arm_left[36][3] = {
	// 정면부터 반시계
	{-0.5f,0.5f,0.0f},
	{-0.5f,-0.5f,0.0f},
	{0.0f,-0.5f,0.5f},

	{-0.5f,0.5f,0.0f},
	{0.0f,-0.5f,0.5f},
	{0.0f,0.5f,0.5f},

	{0.0f,0.5f,0.5f},
	{0.0f,-0.5f,0.5f},
	{0.5f,-0.5f,0.0f},

	{0.0f,0.5f,0.5f},
	{0.5f,-0.5f,0.0f},
	{0.5f,0.5f,0.0f},

	{0.5f,0.5f,0.0f},
	{0.5f,-0.5f,0.0f},
	{0.0f,-0.5f,-0.5f},

	{0.5f,0.5f,0.0f},
	{0.0f,-0.5f,-0.5f},
	{0.0f,0.5f,-0.5f},

	{0.0f,0.5f,-0.5f},
	{0.0f,-0.5f,-0.5f},
	{-0.5f,-0.5f,0.0f},

	{0.0f,0.5f,-0.5f},
	{-0.5f,-0.5f,0.0f},
	{-0.5f,0.5f,0.0f},

	//윗면
	{0.0f,0.5f,-0.5f},
	{0.0f,0.5f,0.5f},
	{0.5f,0.5f,0.0f},

	{0.0f,0.5f,-0.5f},
	{-0.5f,0.5f,0.0f},
	{0.0f,0.5f,0.5f},

	//아랫면
	{0.0f,-0.5f,-0.5f},
	{-0.5f,-0.5f,0.0f},
	{0.0f,-0.5f,0.5f},

	{0.0f,-0.5f,-0.5f},
	{0.0f,-0.5f,0.5f},
	{0.5f,-0.5f,0.0f}
};

GLfloat Arm_right[36][3] = {
	// 정면부터 반시계
	{-0.5f,0.5f,0.0f},
	{-0.5f,-0.5f,0.0f},
	{0.0f,-0.5f,0.5f},

	{-0.5f,0.5f,0.0f},
	{0.0f,-0.5f,0.5f},
	{0.0f,0.5f,0.5f},

	{0.0f,0.5f,0.5f},
	{0.0f,-0.5f,0.5f},
	{0.5f,-0.5f,0.0f},

	{0.0f,0.5f,0.5f},
	{0.5f,-0.5f,0.0f},
	{0.5f,0.5f,0.0f},

	{0.5f,0.5f,0.0f},
	{0.5f,-0.5f,0.0f},
	{0.0f,-0.5f,-0.5f},

	{0.5f,0.5f,0.0f},
	{0.0f,-0.5f,-0.5f},
	{0.0f,0.5f,-0.5f},

	{0.0f,0.5f,-0.5f},
	{0.0f,-0.5f,-0.5f},
	{-0.5f,-0.5f,0.0f},

	{0.0f,0.5f,-0.5f},
	{-0.5f,-0.5f,0.0f},
	{-0.5f,0.5f,0.0f},

	//윗면
	{0.0f,0.5f,-0.5f},
	{0.0f,0.5f,0.5f},
	{0.5f,0.5f,0.0f},

	{0.0f,0.5f,-0.5f},
	{-0.5f,0.5f,0.0f},
	{0.0f,0.5f,0.5f},

	//아랫면
	{0.0f,-0.5f,-0.5f},
	{-0.5f,-0.5f,0.0f},
	{0.0f,-0.5f,0.5f},

	{0.0f,-0.5f,-0.5f},
	{0.0f,-0.5f,0.5f},
	{0.5f,-0.5f,0.0f}
};

GLfloat Leg_left[36][3] = {
	// 정면부터 반시계
	{-0.5f,0.5f,0.0f},
	{-0.5f,-0.5f,0.0f},
	{0.0f,-0.5f,0.5f},

	{-0.5f,0.5f,0.0f},
	{0.0f,-0.5f,0.5f},
	{0.0f,0.5f,0.5f},

	{0.0f,0.5f,0.5f},
	{0.0f,-0.5f,0.5f},
	{0.5f,-0.5f,0.0f},

	{0.0f,0.5f,0.5f},
	{0.5f,-0.5f,0.0f},
	{0.5f,0.5f,0.0f},

	{0.5f,0.5f,0.0f},
	{0.5f,-0.5f,0.0f},
	{0.0f,-0.5f,-0.5f},

	{0.5f,0.5f,0.0f},
	{0.0f,-0.5f,-0.5f},
	{0.0f,0.5f,-0.5f},

	{0.0f,0.5f,-0.5f},
	{0.0f,-0.5f,-0.5f},
	{-0.5f,-0.5f,0.0f},

	{0.0f,0.5f,-0.5f},
	{-0.5f,-0.5f,0.0f},
	{-0.5f,0.5f,0.0f},

	//윗면
	{0.0f,0.5f,-0.5f},
	{0.0f,0.5f,0.5f},
	{0.5f,0.5f,0.0f},

	{0.0f,0.5f,-0.5f},
	{-0.5f,0.5f,0.0f},
	{0.0f,0.5f,0.5f},

	//아랫면
	{0.0f,-0.5f,-0.5f},
	{-0.5f,-0.5f,0.0f},
	{0.0f,-0.5f,0.5f},

	{0.0f,-0.5f,-0.5f},
	{0.0f,-0.5f,0.5f},
	{0.5f,-0.5f,0.0f}
};

GLfloat Leg_right[36][3] = {
	// 정면부터 반시계
	{-0.5f,0.5f,0.0f},
	{-0.5f,-0.5f,0.0f},
	{0.0f,-0.5f,0.5f},

	{-0.5f,0.5f,0.0f},
	{0.0f,-0.5f,0.5f},
	{0.0f,0.5f,0.5f},

	{0.0f,0.5f,0.5f},
	{0.0f,-0.5f,0.5f},
	{0.5f,-0.5f,0.0f},

	{0.0f,0.5f,0.5f},
	{0.5f,-0.5f,0.0f},
	{0.5f,0.5f,0.0f},

	{0.5f,0.5f,0.0f},
	{0.5f,-0.5f,0.0f},
	{0.0f,-0.5f,-0.5f},

	{0.5f,0.5f,0.0f},
	{0.0f,-0.5f,-0.5f},
	{0.0f,0.5f,-0.5f},

	{0.0f,0.5f,-0.5f},
	{0.0f,-0.5f,-0.5f},
	{-0.5f,-0.5f,0.0f},

	{0.0f,0.5f,-0.5f},
	{-0.5f,-0.5f,0.0f},
	{-0.5f,0.5f,0.0f},

	//윗면
	{0.0f,0.5f,-0.5f},
	{0.0f,0.5f,0.5f},
	{0.5f,0.5f,0.0f},

	{0.0f,0.5f,-0.5f},
	{-0.5f,0.5f,0.0f},
	{0.0f,0.5f,0.5f},

	//아랫면
	{0.0f,-0.5f,-0.5f},
	{-0.5f,-0.5f,0.0f},
	{0.0f,-0.5f,0.5f},

	{0.0f,-0.5f,-0.5f},
	{0.0f,-0.5f,0.5f},
	{0.5f,-0.5f,0.0f}
};

GLfloat Red[36][3] = {
	{1.0f,0.0f,0.0f},
	{1.0f,0.0f,0.0f},
	{1.0f,0.0f,0.0f},

	{1.0f,0.0f,0.0f},
	{1.0f,0.0f,0.0f},
	{1.0f,0.0f,0.0f},

	{1.0f,0.0f,0.0f},
	{1.0f,0.0f,0.0f},
	{1.0f,0.0f,0.0f},

	{1.0f,0.0f,0.0f},
	{1.0f,0.0f,0.0f},
	{1.0f,0.0f,0.0f},

	{1.0f,0.0f,0.0f},
	{1.0f,0.0f,0.0f},
	{1.0f,0.0f,0.0f},

	{1.0f,0.0f,0.0f},
	{1.0f,0.0f,0.0f},
	{1.0f,0.0f,0.0f},

	{1.0f,0.0f,0.0f},
	{1.0f,0.0f,0.0f},
	{1.0f,0.0f,0.0f},

	{1.0f,0.0f,0.0f},
	{1.0f,0.0f,0.0f},
	{1.0f,0.0f,0.0f},

	{1.0f,0.0f,0.0f},
	{1.0f,0.0f,0.0f},
	{1.0f,0.0f,0.0f},

	{1.0f,0.0f,0.0f},
	{1.0f,0.0f,0.0f},
	{1.0f,0.0f,0.0f},

	{1.0f,0.0f,0.0f},
	{1.0f,0.0f,0.0f},
	{1.0f,0.0f,0.0f},

	{1.0f,0.0f,0.0f},
	{1.0f,0.0f,0.0f},
	{1.0f,0.0f,0.0f},
};
GLfloat Cyan[36][3] = {
	{0.0f,1.0f,1.0f},
	{0.0f,1.0f,1.0f},
	{0.0f,1.0f,1.0f},

	{0.0f,1.0f,1.0f},
	{0.0f,1.0f,1.0f},
	{0.0f,1.0f,1.0f},

	{0.0f,1.0f,1.0f},
	{0.0f,1.0f,1.0f},
	{0.0f,1.0f,1.0f},

	{0.0f,1.0f,1.0f},
	{0.0f,1.0f,1.0f},
	{0.0f,1.0f,1.0f},

	{0.0f,1.0f,1.0f},
	{0.0f,1.0f,1.0f},
	{0.0f,1.0f,1.0f},

	{0.0f,1.0f,1.0f},
	{0.0f,1.0f,1.0f},
	{0.0f,1.0f,1.0f},

	{0.0f,1.0f,1.0f},
	{0.0f,1.0f,1.0f},
	{0.0f,1.0f,1.0f},

	{0.0f,1.0f,1.0f},
	{0.0f,1.0f,1.0f},
	{0.0f,1.0f,1.0f},

	{0.0f,1.0f,1.0f},
	{0.0f,1.0f,1.0f},
	{0.0f,1.0f,1.0f},

	{0.0f,1.0f,1.0f},
	{0.0f,1.0f,1.0f},
	{0.0f,1.0f,1.0f},

	{0.0f,1.0f,1.0f},
	{0.0f,1.0f,1.0f},
	{0.0f,1.0f,1.0f},

	{0.0f,1.0f,1.0f},
	{0.0f,1.0f,1.0f},
	{0.0f,1.0f,1.0f},
};
GLfloat Yellow[36][3] = {
	{1.0f,1.0f,0.0f},
	{1.0f,1.0f,0.0f},
	{1.0f,1.0f,0.0f},

	{1.0f,1.0f,0.0f},
	{1.0f,1.0f,0.0f},
	{1.0f,1.0f,0.0f},

	{1.0f,1.0f,0.0f},
	{1.0f,1.0f,0.0f},
	{1.0f,1.0f,0.0f},

	{1.0f,1.0f,0.0f},
	{1.0f,1.0f,0.0f},
	{1.0f,1.0f,0.0f},

	{1.0f,1.0f,0.0f},
	{1.0f,1.0f,0.0f},
	{1.0f,1.0f,0.0f},

	{1.0f,1.0f,0.0f},
	{1.0f,1.0f,0.0f},
	{1.0f,1.0f,0.0f},

	{1.0f,1.0f,0.0f},
	{1.0f,1.0f,0.0f},
	{1.0f,1.0f,0.0f},

	{1.0f,1.0f,0.0f},
	{1.0f,1.0f,0.0f},
	{1.0f,1.0f,0.0f},

	{1.0f,1.0f,0.0f},
	{1.0f,1.0f,0.0f},
	{1.0f,1.0f,0.0f},

	{1.0f,1.0f,0.0f},
	{1.0f,1.0f,0.0f},
	{1.0f,1.0f,0.0f},

	{1.0f,1.0f,0.0f},
	{1.0f,1.0f,0.0f},
	{1.0f,1.0f,0.0f},

	{1.0f,1.0f,0.0f},
	{1.0f,1.0f,0.0f},
	{1.0f,1.0f,0.0f},
};


GLfloat Midnemo[36][3] = {
	// 정면부터 반시계
	{-0.5f,0.5f,0.0f},
	{-0.5f,-0.5f,0.0f},
	{0.0f,-0.5f,0.5f},

	{-0.5f,0.5f,0.0f},
	{0.0f,-0.5f,0.5f},
	{0.0f,0.5f,0.5f},

	{0.0f,0.5f,0.5f},
	{0.0f,-0.5f,0.5f},
	{0.5f,-0.5f,0.0f},

	{0.0f,0.5f,0.5f},
	{0.5f,-0.5f,0.0f},
	{0.5f,0.5f,0.0f},

	{0.5f,0.5f,0.0f},
	{0.5f,-0.5f,0.0f},
	{0.0f,-0.5f,-0.5f},

	{0.5f,0.5f,0.0f},
	{0.0f,-0.5f,-0.5f},
	{0.0f,0.5f,-0.5f},

	{0.0f,0.5f,-0.5f},
	{0.0f,-0.5f,-0.5f},
	{-0.5f,-0.5f,0.0f},

	{0.0f,0.5f,-0.5f},
	{-0.5f,-0.5f,0.0f},
	{-0.5f,0.5f,0.0f},

	//윗면
	{0.0f,0.5f,-0.5f},
	{0.0f,0.5f,0.5f},
	{0.5f,0.5f,0.0f},

	{0.0f,0.5f,-0.5f},
	{-0.5f,0.5f,0.0f},
	{0.0f,0.5f,0.5f},

	//아랫면
	{0.0f,-0.5f,-0.5f},
	{-0.5f,-0.5f,0.0f},
	{0.0f,-0.5f,0.5f},

	{0.0f,-0.5f,-0.5f},
	{0.0f,-0.5f,0.5f},
	{0.5f,-0.5f,0.0f}
};

GLfloat Treebottom[36][3] = {
	// 정면부터 반시계
	{-0.5f,0.5f,0.0f},
	{-0.5f,-0.5f,0.0f},
	{0.0f,-0.5f,0.5f},

	{-0.5f,0.5f,0.0f},
	{0.0f,-0.5f,0.5f},
	{0.0f,0.5f,0.5f},

	{0.0f,0.5f,0.5f},
	{0.0f,-0.5f,0.5f},
	{0.5f,-0.5f,0.0f},

	{0.0f,0.5f,0.5f},
	{0.5f,-0.5f,0.0f},
	{0.5f,0.5f,0.0f},

	{0.5f,0.5f,0.0f},
	{0.5f,-0.5f,0.0f},
	{0.0f,-0.5f,-0.5f},

	{0.5f,0.5f,0.0f},
	{0.0f,-0.5f,-0.5f},
	{0.0f,0.5f,-0.5f},

	{0.0f,0.5f,-0.5f},
	{0.0f,-0.5f,-0.5f},
	{-0.5f,-0.5f,0.0f},

	{0.0f,0.5f,-0.5f},
	{-0.5f,-0.5f,0.0f},
	{-0.5f,0.5f,0.0f},

	//윗면
	{0.0f,0.5f,-0.5f},
	{0.0f,0.5f,0.5f},
	{0.5f,0.5f,0.0f},

	{0.0f,0.5f,-0.5f},
	{-0.5f,0.5f,0.0f},
	{0.0f,0.5f,0.5f},

	//아랫면
	{0.0f,-0.5f,-0.5f},
	{-0.5f,-0.5f,0.0f},
	{0.0f,-0.5f,0.5f},

	{0.0f,-0.5f,-0.5f},
	{0.0f,-0.5f,0.5f},
	{0.5f,-0.5f,0.0f}
};

GLfloat IronBar_left[36][3] = {
	// 정면부터 반시계
	{-0.5f,0.5f,0.0f},
	{-0.5f,-0.5f,0.0f},
	{0.0f,-0.5f,0.5f},

	{-0.5f,0.5f,0.0f},
	{0.0f,-0.5f,0.5f},
	{0.0f,0.5f,0.5f},

	{0.0f,0.5f,0.5f},
	{0.0f,-0.5f,0.5f},
	{0.5f,-0.5f,0.0f},

	{0.0f,0.5f,0.5f},
	{0.5f,-0.5f,0.0f},
	{0.5f,0.5f,0.0f},

	{0.5f,0.5f,0.0f},
	{0.5f,-0.5f,0.0f},
	{0.0f,-0.5f,-0.5f},

	{0.5f,0.5f,0.0f},
	{0.0f,-0.5f,-0.5f},
	{0.0f,0.5f,-0.5f},

	{0.0f,0.5f,-0.5f},
	{0.0f,-0.5f,-0.5f},
	{-0.5f,-0.5f,0.0f},

	{0.0f,0.5f,-0.5f},
	{-0.5f,-0.5f,0.0f},
	{-0.5f,0.5f,0.0f},

	//윗면
	{0.0f,0.5f,-0.5f},
	{0.0f,0.5f,0.5f},
	{0.5f,0.5f,0.0f},

	{0.0f,0.5f,-0.5f},
	{-0.5f,0.5f,0.0f},
	{0.0f,0.5f,0.5f},

	//아랫면
	{0.0f,-0.5f,-0.5f},
	{-0.5f,-0.5f,0.0f},
	{0.0f,-0.5f,0.5f},

	{0.0f,-0.5f,-0.5f},
	{0.0f,-0.5f,0.5f},
	{0.5f,-0.5f,0.0f}
};
GLfloat IronBar_right[36][3] = {
	// 정면부터 반시계
	{-0.5f,0.5f,0.0f},
	{-0.5f,-0.5f,0.0f},
	{0.0f,-0.5f,0.5f},

	{-0.5f,0.5f,0.0f},
	{0.0f,-0.5f,0.5f},
	{0.0f,0.5f,0.5f},

	{0.0f,0.5f,0.5f},
	{0.0f,-0.5f,0.5f},
	{0.5f,-0.5f,0.0f},

	{0.0f,0.5f,0.5f},
	{0.5f,-0.5f,0.0f},
	{0.5f,0.5f,0.0f},

	{0.5f,0.5f,0.0f},
	{0.5f,-0.5f,0.0f},
	{0.0f,-0.5f,-0.5f},

	{0.5f,0.5f,0.0f},
	{0.0f,-0.5f,-0.5f},
	{0.0f,0.5f,-0.5f},

	{0.0f,0.5f,-0.5f},
	{0.0f,-0.5f,-0.5f},
	{-0.5f,-0.5f,0.0f},

	{0.0f,0.5f,-0.5f},
	{-0.5f,-0.5f,0.0f},
	{-0.5f,0.5f,0.0f},

	//윗면
	{0.0f,0.5f,-0.5f},
	{0.0f,0.5f,0.5f},
	{0.5f,0.5f,0.0f},

	{0.0f,0.5f,-0.5f},
	{-0.5f,0.5f,0.0f},
	{0.0f,0.5f,0.5f},

	//아랫면
	{0.0f,-0.5f,-0.5f},
	{-0.5f,-0.5f,0.0f},
	{0.0f,-0.5f,0.5f},

	{0.0f,-0.5f,-0.5f},
	{0.0f,-0.5f,0.5f},
	{0.5f,-0.5f,0.0f}
};
GLfloat IronBar_top[36][3] = {
	// 정면부터 반시계
	{-0.5f,0.5f,0.0f},
	{-0.5f,-0.5f,0.0f},
	{0.0f,-0.5f,0.5f},

	{-0.5f,0.5f,0.0f},
	{0.0f,-0.5f,0.5f},
	{0.0f,0.5f,0.5f},

	{0.0f,0.5f,0.5f},
	{0.0f,-0.5f,0.5f},
	{0.5f,-0.5f,0.0f},

	{0.0f,0.5f,0.5f},
	{0.5f,-0.5f,0.0f},
	{0.5f,0.5f,0.0f},

	{0.5f,0.5f,0.0f},
	{0.5f,-0.5f,0.0f},
	{0.0f,-0.5f,-0.5f},

	{0.5f,0.5f,0.0f},
	{0.0f,-0.5f,-0.5f},
	{0.0f,0.5f,-0.5f},

	{0.0f,0.5f,-0.5f},
	{0.0f,-0.5f,-0.5f},
	{-0.5f,-0.5f,0.0f},

	{0.0f,0.5f,-0.5f},
	{-0.5f,-0.5f,0.0f},
	{-0.5f,0.5f,0.0f},

	//윗면
	{0.0f,0.5f,-0.5f},
	{0.0f,0.5f,0.5f},
	{0.5f,0.5f,0.0f},

	{0.0f,0.5f,-0.5f},
	{-0.5f,0.5f,0.0f},
	{0.0f,0.5f,0.5f},

	//아랫면
	{0.0f,-0.5f,-0.5f},
	{-0.5f,-0.5f,0.0f},
	{0.0f,-0.5f,0.5f},

	{0.0f,-0.5f,-0.5f},
	{0.0f,-0.5f,0.5f},
	{0.5f,-0.5f,0.0f}
};

GLfloat IronBar_human_body[36][3] = {
	// 정면부터 반시계
	{-0.5f,0.5f,0.0f},
	{-0.5f,-0.5f,0.0f},
	{0.0f,-0.5f,0.5f},

	{-0.5f,0.5f,0.0f},
	{0.0f,-0.5f,0.5f},
	{0.0f,0.5f,0.5f},

	{0.0f,0.5f,0.5f},
	{0.0f,-0.5f,0.5f},
	{0.5f,-0.5f,0.0f},

	{0.0f,0.5f,0.5f},
	{0.5f,-0.5f,0.0f},
	{0.5f,0.5f,0.0f},

	{0.5f,0.5f,0.0f},
	{0.5f,-0.5f,0.0f},
	{0.0f,-0.5f,-0.5f},

	{0.5f,0.5f,0.0f},
	{0.0f,-0.5f,-0.5f},
	{0.0f,0.5f,-0.5f},

	{0.0f,0.5f,-0.5f},
	{0.0f,-0.5f,-0.5f},
	{-0.5f,-0.5f,0.0f},

	{0.0f,0.5f,-0.5f},
	{-0.5f,-0.5f,0.0f},
	{-0.5f,0.5f,0.0f},

	//윗면
	{0.0f,0.5f,-0.5f},
	{0.0f,0.5f,0.5f},
	{0.5f,0.5f,0.0f},

	{0.0f,0.5f,-0.5f},
	{-0.5f,0.5f,0.0f},
	{0.0f,0.5f,0.5f},

	//아랫면
	{0.0f,-0.5f,-0.5f},
	{-0.5f,-0.5f,0.0f},
	{0.0f,-0.5f,0.5f},

	{0.0f,-0.5f,-0.5f},
	{0.0f,-0.5f,0.5f},
	{0.5f,-0.5f,0.0f}
};
GLfloat IronBar_human_Larm[36][3] = {
	// 정면부터 반시계
	{-0.5f,0.5f,0.0f},
	{-0.5f,-0.5f,0.0f},
	{0.0f,-0.5f,0.5f},

	{-0.5f,0.5f,0.0f},
	{0.0f,-0.5f,0.5f},
	{0.0f,0.5f,0.5f},

	{0.0f,0.5f,0.5f},
	{0.0f,-0.5f,0.5f},
	{0.5f,-0.5f,0.0f},

	{0.0f,0.5f,0.5f},
	{0.5f,-0.5f,0.0f},
	{0.5f,0.5f,0.0f},

	{0.5f,0.5f,0.0f},
	{0.5f,-0.5f,0.0f},
	{0.0f,-0.5f,-0.5f},

	{0.5f,0.5f,0.0f},
	{0.0f,-0.5f,-0.5f},
	{0.0f,0.5f,-0.5f},

	{0.0f,0.5f,-0.5f},
	{0.0f,-0.5f,-0.5f},
	{-0.5f,-0.5f,0.0f},

	{0.0f,0.5f,-0.5f},
	{-0.5f,-0.5f,0.0f},
	{-0.5f,0.5f,0.0f},

	//윗면
	{0.0f,0.5f,-0.5f},
	{0.0f,0.5f,0.5f},
	{0.5f,0.5f,0.0f},

	{0.0f,0.5f,-0.5f},
	{-0.5f,0.5f,0.0f},
	{0.0f,0.5f,0.5f},

	//아랫면
	{0.0f,-0.5f,-0.5f},
	{-0.5f,-0.5f,0.0f},
	{0.0f,-0.5f,0.5f},

	{0.0f,-0.5f,-0.5f},
	{0.0f,-0.5f,0.5f},
	{0.5f,-0.5f,0.0f}
};
GLfloat IronBar_human_Rarm[36][3] = {
	// 정면부터 반시계
	{-0.5f,0.5f,0.0f},
	{-0.5f,-0.5f,0.0f},
	{0.0f,-0.5f,0.5f},

	{-0.5f,0.5f,0.0f},
	{0.0f,-0.5f,0.5f},
	{0.0f,0.5f,0.5f},

	{0.0f,0.5f,0.5f},
	{0.0f,-0.5f,0.5f},
	{0.5f,-0.5f,0.0f},

	{0.0f,0.5f,0.5f},
	{0.5f,-0.5f,0.0f},
	{0.5f,0.5f,0.0f},

	{0.5f,0.5f,0.0f},
	{0.5f,-0.5f,0.0f},
	{0.0f,-0.5f,-0.5f},

	{0.5f,0.5f,0.0f},
	{0.0f,-0.5f,-0.5f},
	{0.0f,0.5f,-0.5f},

	{0.0f,0.5f,-0.5f},
	{0.0f,-0.5f,-0.5f},
	{-0.5f,-0.5f,0.0f},

	{0.0f,0.5f,-0.5f},
	{-0.5f,-0.5f,0.0f},
	{-0.5f,0.5f,0.0f},

	//윗면
	{0.0f,0.5f,-0.5f},
	{0.0f,0.5f,0.5f},
	{0.5f,0.5f,0.0f},

	{0.0f,0.5f,-0.5f},
	{-0.5f,0.5f,0.0f},
	{0.0f,0.5f,0.5f},

	//아랫면
	{0.0f,-0.5f,-0.5f},
	{-0.5f,-0.5f,0.0f},
	{0.0f,-0.5f,0.5f},

	{0.0f,-0.5f,-0.5f},
	{0.0f,-0.5f,0.5f},
	{0.5f,-0.5f,0.0f}
};
GLfloat IronBar_human_Lleg[36][3] = {
	// 정면부터 반시계
	{-0.5f,0.5f,0.0f},
	{-0.5f,-0.5f,0.0f},
	{0.0f,-0.5f,0.5f},

	{-0.5f,0.5f,0.0f},
	{0.0f,-0.5f,0.5f},
	{0.0f,0.5f,0.5f},

	{0.0f,0.5f,0.5f},
	{0.0f,-0.5f,0.5f},
	{0.5f,-0.5f,0.0f},

	{0.0f,0.5f,0.5f},
	{0.5f,-0.5f,0.0f},
	{0.5f,0.5f,0.0f},

	{0.5f,0.5f,0.0f},
	{0.5f,-0.5f,0.0f},
	{0.0f,-0.5f,-0.5f},

	{0.5f,0.5f,0.0f},
	{0.0f,-0.5f,-0.5f},
	{0.0f,0.5f,-0.5f},

	{0.0f,0.5f,-0.5f},
	{0.0f,-0.5f,-0.5f},
	{-0.5f,-0.5f,0.0f},

	{0.0f,0.5f,-0.5f},
	{-0.5f,-0.5f,0.0f},
	{-0.5f,0.5f,0.0f},

	//윗면
	{0.0f,0.5f,-0.5f},
	{0.0f,0.5f,0.5f},
	{0.5f,0.5f,0.0f},

	{0.0f,0.5f,-0.5f},
	{-0.5f,0.5f,0.0f},
	{0.0f,0.5f,0.5f},

	//아랫면
	{0.0f,-0.5f,-0.5f},
	{-0.5f,-0.5f,0.0f},
	{0.0f,-0.5f,0.5f},

	{0.0f,-0.5f,-0.5f},
	{0.0f,-0.5f,0.5f},
	{0.5f,-0.5f,0.0f}
};
GLfloat IronBar_human_Rleg[36][3] = {
	// 정면부터 반시계
	{-0.5f,0.5f,0.0f},
	{-0.5f,-0.5f,0.0f},
	{0.0f,-0.5f,0.5f},

	{-0.5f,0.5f,0.0f},
	{0.0f,-0.5f,0.5f},
	{0.0f,0.5f,0.5f},

	{0.0f,0.5f,0.5f},
	{0.0f,-0.5f,0.5f},
	{0.5f,-0.5f,0.0f},

	{0.0f,0.5f,0.5f},
	{0.5f,-0.5f,0.0f},
	{0.5f,0.5f,0.0f},

	{0.5f,0.5f,0.0f},
	{0.5f,-0.5f,0.0f},
	{0.0f,-0.5f,-0.5f},

	{0.5f,0.5f,0.0f},
	{0.0f,-0.5f,-0.5f},
	{0.0f,0.5f,-0.5f},

	{0.0f,0.5f,-0.5f},
	{0.0f,-0.5f,-0.5f},
	{-0.5f,-0.5f,0.0f},

	{0.0f,0.5f,-0.5f},
	{-0.5f,-0.5f,0.0f},
	{-0.5f,0.5f,0.0f},

	//윗면
	{0.0f,0.5f,-0.5f},
	{0.0f,0.5f,0.5f},
	{0.5f,0.5f,0.0f},

	{0.0f,0.5f,-0.5f},
	{-0.5f,0.5f,0.0f},
	{0.0f,0.5f,0.5f},

	//아랫면
	{0.0f,-0.5f,-0.5f},
	{-0.5f,-0.5f,0.0f},
	{0.0f,-0.5f,0.5f},

	{0.0f,-0.5f,-0.5f},
	{0.0f,-0.5f,0.5f},
	{0.5f,-0.5f,0.0f}
};

GLfloat Bench_leg1[36][3] = {
	// 정면부터 반시계
	{-0.5f,0.5f,0.0f},
	{-0.5f,-0.5f,0.0f},
	{0.0f,-0.5f,0.5f},

	{-0.5f,0.5f,0.0f},
	{0.0f,-0.5f,0.5f},
	{0.0f,0.5f,0.5f},

	{0.0f,0.5f,0.5f},
	{0.0f,-0.5f,0.5f},
	{0.5f,-0.5f,0.0f},

	{0.0f,0.5f,0.5f},
	{0.5f,-0.5f,0.0f},
	{0.5f,0.5f,0.0f},

	{0.5f,0.5f,0.0f},
	{0.5f,-0.5f,0.0f},
	{0.0f,-0.5f,-0.5f},

	{0.5f,0.5f,0.0f},
	{0.0f,-0.5f,-0.5f},
	{0.0f,0.5f,-0.5f},

	{0.0f,0.5f,-0.5f},
	{0.0f,-0.5f,-0.5f},
	{-0.5f,-0.5f,0.0f},

	{0.0f,0.5f,-0.5f},
	{-0.5f,-0.5f,0.0f},
	{-0.5f,0.5f,0.0f},

	//윗면
	{0.0f,0.5f,-0.5f},
	{0.0f,0.5f,0.5f},
	{0.5f,0.5f,0.0f},

	{0.0f,0.5f,-0.5f},
	{-0.5f,0.5f,0.0f},
	{0.0f,0.5f,0.5f},

	//아랫면
	{0.0f,-0.5f,-0.5f},
	{-0.5f,-0.5f,0.0f},
	{0.0f,-0.5f,0.5f},

	{0.0f,-0.5f,-0.5f},
	{0.0f,-0.5f,0.5f},
	{0.5f,-0.5f,0.0f}
};
GLfloat Bench_leg2[36][3] = {
	// 정면부터 반시계
	{-0.5f,0.5f,0.0f},
	{-0.5f,-0.5f,0.0f},
	{0.0f,-0.5f,0.5f},

	{-0.5f,0.5f,0.0f},
	{0.0f,-0.5f,0.5f},
	{0.0f,0.5f,0.5f},

	{0.0f,0.5f,0.5f},
	{0.0f,-0.5f,0.5f},
	{0.5f,-0.5f,0.0f},

	{0.0f,0.5f,0.5f},
	{0.5f,-0.5f,0.0f},
	{0.5f,0.5f,0.0f},

	{0.5f,0.5f,0.0f},
	{0.5f,-0.5f,0.0f},
	{0.0f,-0.5f,-0.5f},

	{0.5f,0.5f,0.0f},
	{0.0f,-0.5f,-0.5f},
	{0.0f,0.5f,-0.5f},

	{0.0f,0.5f,-0.5f},
	{0.0f,-0.5f,-0.5f},
	{-0.5f,-0.5f,0.0f},

	{0.0f,0.5f,-0.5f},
	{-0.5f,-0.5f,0.0f},
	{-0.5f,0.5f,0.0f},

	//윗면
	{0.0f,0.5f,-0.5f},
	{0.0f,0.5f,0.5f},
	{0.5f,0.5f,0.0f},

	{0.0f,0.5f,-0.5f},
	{-0.5f,0.5f,0.0f},
	{0.0f,0.5f,0.5f},

	//아랫면
	{0.0f,-0.5f,-0.5f},
	{-0.5f,-0.5f,0.0f},
	{0.0f,-0.5f,0.5f},

	{0.0f,-0.5f,-0.5f},
	{0.0f,-0.5f,0.5f},
	{0.5f,-0.5f,0.0f}
};
GLfloat Bench_leg3[36][3] = {
	// 정면부터 반시계
	{-0.5f,0.5f,0.0f},
	{-0.5f,-0.5f,0.0f},
	{0.0f,-0.5f,0.5f},

	{-0.5f,0.5f,0.0f},
	{0.0f,-0.5f,0.5f},
	{0.0f,0.5f,0.5f},

	{0.0f,0.5f,0.5f},
	{0.0f,-0.5f,0.5f},
	{0.5f,-0.5f,0.0f},

	{0.0f,0.5f,0.5f},
	{0.5f,-0.5f,0.0f},
	{0.5f,0.5f,0.0f},

	{0.5f,0.5f,0.0f},
	{0.5f,-0.5f,0.0f},
	{0.0f,-0.5f,-0.5f},

	{0.5f,0.5f,0.0f},
	{0.0f,-0.5f,-0.5f},
	{0.0f,0.5f,-0.5f},

	{0.0f,0.5f,-0.5f},
	{0.0f,-0.5f,-0.5f},
	{-0.5f,-0.5f,0.0f},

	{0.0f,0.5f,-0.5f},
	{-0.5f,-0.5f,0.0f},
	{-0.5f,0.5f,0.0f},

	//윗면
	{0.0f,0.5f,-0.5f},
	{0.0f,0.5f,0.5f},
	{0.5f,0.5f,0.0f},

	{0.0f,0.5f,-0.5f},
	{-0.5f,0.5f,0.0f},
	{0.0f,0.5f,0.5f},

	//아랫면
	{0.0f,-0.5f,-0.5f},
	{-0.5f,-0.5f,0.0f},
	{0.0f,-0.5f,0.5f},

	{0.0f,-0.5f,-0.5f},
	{0.0f,-0.5f,0.5f},
	{0.5f,-0.5f,0.0f}
};
GLfloat Bench_leg4[36][3] = {
	// 정면부터 반시계
	{-0.5f,0.5f,0.0f},
	{-0.5f,-0.5f,0.0f},
	{0.0f,-0.5f,0.5f},

	{-0.5f,0.5f,0.0f},
	{0.0f,-0.5f,0.5f},
	{0.0f,0.5f,0.5f},

	{0.0f,0.5f,0.5f},
	{0.0f,-0.5f,0.5f},
	{0.5f,-0.5f,0.0f},

	{0.0f,0.5f,0.5f},
	{0.5f,-0.5f,0.0f},
	{0.5f,0.5f,0.0f},

	{0.5f,0.5f,0.0f},
	{0.5f,-0.5f,0.0f},
	{0.0f,-0.5f,-0.5f},

	{0.5f,0.5f,0.0f},
	{0.0f,-0.5f,-0.5f},
	{0.0f,0.5f,-0.5f},

	{0.0f,0.5f,-0.5f},
	{0.0f,-0.5f,-0.5f},
	{-0.5f,-0.5f,0.0f},

	{0.0f,0.5f,-0.5f},
	{-0.5f,-0.5f,0.0f},
	{-0.5f,0.5f,0.0f},

	//윗면
	{0.0f,0.5f,-0.5f},
	{0.0f,0.5f,0.5f},
	{0.5f,0.5f,0.0f},

	{0.0f,0.5f,-0.5f},
	{-0.5f,0.5f,0.0f},
	{0.0f,0.5f,0.5f},

	//아랫면
	{0.0f,-0.5f,-0.5f},
	{-0.5f,-0.5f,0.0f},
	{0.0f,-0.5f,0.5f},

	{0.0f,-0.5f,-0.5f},
	{0.0f,-0.5f,0.5f},
	{0.5f,-0.5f,0.0f}
};
GLfloat Bench_board[36][3] = {
	// 정면부터 반시계
	{-0.5f,0.5f,0.0f},
	{-0.5f,-0.5f,0.0f},
	{0.0f,-0.5f,0.5f},

	{-0.5f,0.5f,0.0f},
	{0.0f,-0.5f,0.5f},
	{0.0f,0.5f,0.5f},

	{0.0f,0.5f,0.5f},
	{0.0f,-0.5f,0.5f},
	{0.5f,-0.5f,0.0f},

	{0.0f,0.5f,0.5f},
	{0.5f,-0.5f,0.0f},
	{0.5f,0.5f,0.0f},

	{0.5f,0.5f,0.0f},
	{0.5f,-0.5f,0.0f},
	{0.0f,-0.5f,-0.5f},

	{0.5f,0.5f,0.0f},
	{0.0f,-0.5f,-0.5f},
	{0.0f,0.5f,-0.5f},

	{0.0f,0.5f,-0.5f},
	{0.0f,-0.5f,-0.5f},
	{-0.5f,-0.5f,0.0f},

	{0.0f,0.5f,-0.5f},
	{-0.5f,-0.5f,0.0f},
	{-0.5f,0.5f,0.0f},

	//윗면
	{0.0f,0.5f,-0.5f},
	{0.0f,0.5f,0.5f},
	{0.5f,0.5f,0.0f},

	{0.0f,0.5f,-0.5f},
	{-0.5f,0.5f,0.0f},
	{0.0f,0.5f,0.5f},

	//아랫면
	{0.0f,-0.5f,-0.5f},
	{-0.5f,-0.5f,0.0f},
	{0.0f,-0.5f,0.5f},

	{0.0f,-0.5f,-0.5f},
	{0.0f,-0.5f,0.5f},
	{0.5f,-0.5f,0.0f}
};
GLfloat Bench_bar[36][3] = {
	// 정면부터 반시계
	{-0.5f,0.5f,0.0f},
	{-0.5f,-0.5f,0.0f},
	{0.0f,-0.5f,0.5f},

	{-0.5f,0.5f,0.0f},
	{0.0f,-0.5f,0.5f},
	{0.0f,0.5f,0.5f},

	{0.0f,0.5f,0.5f},
	{0.0f,-0.5f,0.5f},
	{0.5f,-0.5f,0.0f},

	{0.0f,0.5f,0.5f},
	{0.5f,-0.5f,0.0f},
	{0.5f,0.5f,0.0f},

	{0.5f,0.5f,0.0f},
	{0.5f,-0.5f,0.0f},
	{0.0f,-0.5f,-0.5f},

	{0.5f,0.5f,0.0f},
	{0.0f,-0.5f,-0.5f},
	{0.0f,0.5f,-0.5f},

	{0.0f,0.5f,-0.5f},
	{0.0f,-0.5f,-0.5f},
	{-0.5f,-0.5f,0.0f},

	{0.0f,0.5f,-0.5f},
	{-0.5f,-0.5f,0.0f},
	{-0.5f,0.5f,0.0f},

	//윗면
	{0.0f,0.5f,-0.5f},
	{0.0f,0.5f,0.5f},
	{0.5f,0.5f,0.0f},

	{0.0f,0.5f,-0.5f},
	{-0.5f,0.5f,0.0f},
	{0.0f,0.5f,0.5f},

	//아랫면
	{0.0f,-0.5f,-0.5f},
	{-0.5f,-0.5f,0.0f},
	{0.0f,-0.5f,0.5f},

	{0.0f,-0.5f,-0.5f},
	{0.0f,-0.5f,0.5f},
	{0.5f,-0.5f,0.0f}
};

GLfloat Bench_human_body[36][3] = {
	// 정면부터 반시계
	{-0.5f,0.5f,0.0f},
	{-0.5f,-0.5f,0.0f},
	{0.0f,-0.5f,0.5f},

	{-0.5f,0.5f,0.0f},
	{0.0f,-0.5f,0.5f},
	{0.0f,0.5f,0.5f},

	{0.0f,0.5f,0.5f},
	{0.0f,-0.5f,0.5f},
	{0.5f,-0.5f,0.0f},

	{0.0f,0.5f,0.5f},
	{0.5f,-0.5f,0.0f},
	{0.5f,0.5f,0.0f},

	{0.5f,0.5f,0.0f},
	{0.5f,-0.5f,0.0f},
	{0.0f,-0.5f,-0.5f},

	{0.5f,0.5f,0.0f},
	{0.0f,-0.5f,-0.5f},
	{0.0f,0.5f,-0.5f},

	{0.0f,0.5f,-0.5f},
	{0.0f,-0.5f,-0.5f},
	{-0.5f,-0.5f,0.0f},

	{0.0f,0.5f,-0.5f},
	{-0.5f,-0.5f,0.0f},
	{-0.5f,0.5f,0.0f},

	//윗면
	{0.0f,0.5f,-0.5f},
	{0.0f,0.5f,0.5f},
	{0.5f,0.5f,0.0f},

	{0.0f,0.5f,-0.5f},
	{-0.5f,0.5f,0.0f},
	{0.0f,0.5f,0.5f},

	//아랫면
	{0.0f,-0.5f,-0.5f},
	{-0.5f,-0.5f,0.0f},
	{0.0f,-0.5f,0.5f},

	{0.0f,-0.5f,-0.5f},
	{0.0f,-0.5f,0.5f},
	{0.5f,-0.5f,0.0f}
};
GLfloat Bench_human_Larm1[36][3] = {
	// 정면부터 반시계
	{-0.5f,0.5f,0.0f},
	{-0.5f,-0.5f,0.0f},
	{0.0f,-0.5f,0.5f},

	{-0.5f,0.5f,0.0f},
	{0.0f,-0.5f,0.5f},
	{0.0f,0.5f,0.5f},

	{0.0f,0.5f,0.5f},
	{0.0f,-0.5f,0.5f},
	{0.5f,-0.5f,0.0f},

	{0.0f,0.5f,0.5f},
	{0.5f,-0.5f,0.0f},
	{0.5f,0.5f,0.0f},

	{0.5f,0.5f,0.0f},
	{0.5f,-0.5f,0.0f},
	{0.0f,-0.5f,-0.5f},

	{0.5f,0.5f,0.0f},
	{0.0f,-0.5f,-0.5f},
	{0.0f,0.5f,-0.5f},

	{0.0f,0.5f,-0.5f},
	{0.0f,-0.5f,-0.5f},
	{-0.5f,-0.5f,0.0f},

	{0.0f,0.5f,-0.5f},
	{-0.5f,-0.5f,0.0f},
	{-0.5f,0.5f,0.0f},

	//윗면
	{0.0f,0.5f,-0.5f},
	{0.0f,0.5f,0.5f},
	{0.5f,0.5f,0.0f},

	{0.0f,0.5f,-0.5f},
	{-0.5f,0.5f,0.0f},
	{0.0f,0.5f,0.5f},

	//아랫면
	{0.0f,-0.5f,-0.5f},
	{-0.5f,-0.5f,0.0f},
	{0.0f,-0.5f,0.5f},

	{0.0f,-0.5f,-0.5f},
	{0.0f,-0.5f,0.5f},
	{0.5f,-0.5f,0.0f}
};
GLfloat Bench_human_Larm2[36][3] = {
	// 정면부터 반시계
	{-0.5f,0.5f,0.0f},
	{-0.5f,-0.5f,0.0f},
	{0.0f,-0.5f,0.5f},

	{-0.5f,0.5f,0.0f},
	{0.0f,-0.5f,0.5f},
	{0.0f,0.5f,0.5f},

	{0.0f,0.5f,0.5f},
	{0.0f,-0.5f,0.5f},
	{0.5f,-0.5f,0.0f},

	{0.0f,0.5f,0.5f},
	{0.5f,-0.5f,0.0f},
	{0.5f,0.5f,0.0f},

	{0.5f,0.5f,0.0f},
	{0.5f,-0.5f,0.0f},
	{0.0f,-0.5f,-0.5f},

	{0.5f,0.5f,0.0f},
	{0.0f,-0.5f,-0.5f},
	{0.0f,0.5f,-0.5f},

	{0.0f,0.5f,-0.5f},
	{0.0f,-0.5f,-0.5f},
	{-0.5f,-0.5f,0.0f},

	{0.0f,0.5f,-0.5f},
	{-0.5f,-0.5f,0.0f},
	{-0.5f,0.5f,0.0f},

	//윗면
	{0.0f,0.5f,-0.5f},
	{0.0f,0.5f,0.5f},
	{0.5f,0.5f,0.0f},

	{0.0f,0.5f,-0.5f},
	{-0.5f,0.5f,0.0f},
	{0.0f,0.5f,0.5f},

	//아랫면
	{0.0f,-0.5f,-0.5f},
	{-0.5f,-0.5f,0.0f},
	{0.0f,-0.5f,0.5f},

	{0.0f,-0.5f,-0.5f},
	{0.0f,-0.5f,0.5f},
	{0.5f,-0.5f,0.0f}
};
GLfloat Bench_human_Rarm1[36][3] = {
	// 정면부터 반시계
	{-0.5f,0.5f,0.0f},
	{-0.5f,-0.5f,0.0f},
	{0.0f,-0.5f,0.5f},

	{-0.5f,0.5f,0.0f},
	{0.0f,-0.5f,0.5f},
	{0.0f,0.5f,0.5f},

	{0.0f,0.5f,0.5f},
	{0.0f,-0.5f,0.5f},
	{0.5f,-0.5f,0.0f},

	{0.0f,0.5f,0.5f},
	{0.5f,-0.5f,0.0f},
	{0.5f,0.5f,0.0f},

	{0.5f,0.5f,0.0f},
	{0.5f,-0.5f,0.0f},
	{0.0f,-0.5f,-0.5f},

	{0.5f,0.5f,0.0f},
	{0.0f,-0.5f,-0.5f},
	{0.0f,0.5f,-0.5f},

	{0.0f,0.5f,-0.5f},
	{0.0f,-0.5f,-0.5f},
	{-0.5f,-0.5f,0.0f},

	{0.0f,0.5f,-0.5f},
	{-0.5f,-0.5f,0.0f},
	{-0.5f,0.5f,0.0f},

	//윗면
	{0.0f,0.5f,-0.5f},
	{0.0f,0.5f,0.5f},
	{0.5f,0.5f,0.0f},

	{0.0f,0.5f,-0.5f},
	{-0.5f,0.5f,0.0f},
	{0.0f,0.5f,0.5f},

	//아랫면
	{0.0f,-0.5f,-0.5f},
	{-0.5f,-0.5f,0.0f},
	{0.0f,-0.5f,0.5f},

	{0.0f,-0.5f,-0.5f},
	{0.0f,-0.5f,0.5f},
	{0.5f,-0.5f,0.0f}
};
GLfloat Bench_human_Rarm2[36][3] = {
	// 정면부터 반시계
	{-0.5f,0.5f,0.0f},
	{-0.5f,-0.5f,0.0f},
	{0.0f,-0.5f,0.5f},

	{-0.5f,0.5f,0.0f},
	{0.0f,-0.5f,0.5f},
	{0.0f,0.5f,0.5f},

	{0.0f,0.5f,0.5f},
	{0.0f,-0.5f,0.5f},
	{0.5f,-0.5f,0.0f},

	{0.0f,0.5f,0.5f},
	{0.5f,-0.5f,0.0f},
	{0.5f,0.5f,0.0f},

	{0.5f,0.5f,0.0f},
	{0.5f,-0.5f,0.0f},
	{0.0f,-0.5f,-0.5f},

	{0.5f,0.5f,0.0f},
	{0.0f,-0.5f,-0.5f},
	{0.0f,0.5f,-0.5f},

	{0.0f,0.5f,-0.5f},
	{0.0f,-0.5f,-0.5f},
	{-0.5f,-0.5f,0.0f},

	{0.0f,0.5f,-0.5f},
	{-0.5f,-0.5f,0.0f},
	{-0.5f,0.5f,0.0f},

	//윗면
	{0.0f,0.5f,-0.5f},
	{0.0f,0.5f,0.5f},
	{0.5f,0.5f,0.0f},

	{0.0f,0.5f,-0.5f},
	{-0.5f,0.5f,0.0f},
	{0.0f,0.5f,0.5f},

	//아랫면
	{0.0f,-0.5f,-0.5f},
	{-0.5f,-0.5f,0.0f},
	{0.0f,-0.5f,0.5f},

	{0.0f,-0.5f,-0.5f},
	{0.0f,-0.5f,0.5f},
	{0.5f,-0.5f,0.0f}
};
GLfloat Bench_human_Lleg[36][3] = {
	// 정면부터 반시계
	{-0.5f,0.5f,0.0f},
	{-0.5f,-0.5f,0.0f},
	{0.0f,-0.5f,0.5f},

	{-0.5f,0.5f,0.0f},
	{0.0f,-0.5f,0.5f},
	{0.0f,0.5f,0.5f},

	{0.0f,0.5f,0.5f},
	{0.0f,-0.5f,0.5f},
	{0.5f,-0.5f,0.0f},

	{0.0f,0.5f,0.5f},
	{0.5f,-0.5f,0.0f},
	{0.5f,0.5f,0.0f},

	{0.5f,0.5f,0.0f},
	{0.5f,-0.5f,0.0f},
	{0.0f,-0.5f,-0.5f},

	{0.5f,0.5f,0.0f},
	{0.0f,-0.5f,-0.5f},
	{0.0f,0.5f,-0.5f},

	{0.0f,0.5f,-0.5f},
	{0.0f,-0.5f,-0.5f},
	{-0.5f,-0.5f,0.0f},

	{0.0f,0.5f,-0.5f},
	{-0.5f,-0.5f,0.0f},
	{-0.5f,0.5f,0.0f},

	//윗면
	{0.0f,0.5f,-0.5f},
	{0.0f,0.5f,0.5f},
	{0.5f,0.5f,0.0f},

	{0.0f,0.5f,-0.5f},
	{-0.5f,0.5f,0.0f},
	{0.0f,0.5f,0.5f},

	//아랫면
	{0.0f,-0.5f,-0.5f},
	{-0.5f,-0.5f,0.0f},
	{0.0f,-0.5f,0.5f},

	{0.0f,-0.5f,-0.5f},
	{0.0f,-0.5f,0.5f},
	{0.5f,-0.5f,0.0f}
};
GLfloat Bench_human_Rleg[36][3] = {
	// 정면부터 반시계
	{-0.5f,0.5f,0.0f},
	{-0.5f,-0.5f,0.0f},
	{0.0f,-0.5f,0.5f},

	{-0.5f,0.5f,0.0f},
	{0.0f,-0.5f,0.5f},
	{0.0f,0.5f,0.5f},

	{0.0f,0.5f,0.5f},
	{0.0f,-0.5f,0.5f},
	{0.5f,-0.5f,0.0f},

	{0.0f,0.5f,0.5f},
	{0.5f,-0.5f,0.0f},
	{0.5f,0.5f,0.0f},

	{0.5f,0.5f,0.0f},
	{0.5f,-0.5f,0.0f},
	{0.0f,-0.5f,-0.5f},

	{0.5f,0.5f,0.0f},
	{0.0f,-0.5f,-0.5f},
	{0.0f,0.5f,-0.5f},

	{0.0f,0.5f,-0.5f},
	{0.0f,-0.5f,-0.5f},
	{-0.5f,-0.5f,0.0f},

	{0.0f,0.5f,-0.5f},
	{-0.5f,-0.5f,0.0f},
	{-0.5f,0.5f,0.0f},

	//윗면
	{0.0f,0.5f,-0.5f},
	{0.0f,0.5f,0.5f},
	{0.5f,0.5f,0.0f},

	{0.0f,0.5f,-0.5f},
	{-0.5f,0.5f,0.0f},
	{0.0f,0.5f,0.5f},

	//아랫면
	{0.0f,-0.5f,-0.5f},
	{-0.5f,-0.5f,0.0f},
	{0.0f,-0.5f,0.5f},

	{0.0f,-0.5f,-0.5f},
	{0.0f,-0.5f,0.5f},
	{0.5f,-0.5f,0.0f}
};

GLfloat Running_board[36][3] = {
	// 정면부터 반시계
	{-0.5f,0.5f,0.0f},
	{-0.5f,-0.5f,0.0f},
	{0.0f,-0.5f,0.5f},

	{-0.5f,0.5f,0.0f},
	{0.0f,-0.5f,0.5f},
	{0.0f,0.5f,0.5f},

	{0.0f,0.5f,0.5f},
	{0.0f,-0.5f,0.5f},
	{0.5f,-0.5f,0.0f},

	{0.0f,0.5f,0.5f},
	{0.5f,-0.5f,0.0f},
	{0.5f,0.5f,0.0f},

	{0.5f,0.5f,0.0f},
	{0.5f,-0.5f,0.0f},
	{0.0f,-0.5f,-0.5f},

	{0.5f,0.5f,0.0f},
	{0.0f,-0.5f,-0.5f},
	{0.0f,0.5f,-0.5f},

	{0.0f,0.5f,-0.5f},
	{0.0f,-0.5f,-0.5f},
	{-0.5f,-0.5f,0.0f},

	{0.0f,0.5f,-0.5f},
	{-0.5f,-0.5f,0.0f},
	{-0.5f,0.5f,0.0f},

	//윗면
	{0.0f,0.5f,-0.5f},
	{0.0f,0.5f,0.5f},
	{0.5f,0.5f,0.0f},

	{0.0f,0.5f,-0.5f},
	{-0.5f,0.5f,0.0f},
	{0.0f,0.5f,0.5f},

	//아랫면
	{0.0f,-0.5f,-0.5f},
	{-0.5f,-0.5f,0.0f},
	{0.0f,-0.5f,0.5f},

	{0.0f,-0.5f,-0.5f},
	{0.0f,-0.5f,0.5f},
	{0.5f,-0.5f,0.0f}
};
GLfloat Running_Left[36][3] = {
	// 정면부터 반시계
	{-0.5f,0.5f,0.0f},
	{-0.5f,-0.5f,0.0f},
	{0.0f,-0.5f,0.5f},

	{-0.5f,0.5f,0.0f},
	{0.0f,-0.5f,0.5f},
	{0.0f,0.5f,0.5f},

	{0.0f,0.5f,0.5f},
	{0.0f,-0.5f,0.5f},
	{0.5f,-0.5f,0.0f},

	{0.0f,0.5f,0.5f},
	{0.5f,-0.5f,0.0f},
	{0.5f,0.5f,0.0f},

	{0.5f,0.5f,0.0f},
	{0.5f,-0.5f,0.0f},
	{0.0f,-0.5f,-0.5f},

	{0.5f,0.5f,0.0f},
	{0.0f,-0.5f,-0.5f},
	{0.0f,0.5f,-0.5f},

	{0.0f,0.5f,-0.5f},
	{0.0f,-0.5f,-0.5f},
	{-0.5f,-0.5f,0.0f},

	{0.0f,0.5f,-0.5f},
	{-0.5f,-0.5f,0.0f},
	{-0.5f,0.5f,0.0f},

	//윗면
	{0.0f,0.5f,-0.5f},
	{0.0f,0.5f,0.5f},
	{0.5f,0.5f,0.0f},

	{0.0f,0.5f,-0.5f},
	{-0.5f,0.5f,0.0f},
	{0.0f,0.5f,0.5f},

	//아랫면
	{0.0f,-0.5f,-0.5f},
	{-0.5f,-0.5f,0.0f},
	{0.0f,-0.5f,0.5f},

	{0.0f,-0.5f,-0.5f},
	{0.0f,-0.5f,0.5f},
	{0.5f,-0.5f,0.0f}
};
GLfloat Running_Right[36][3] = {
	// 정면부터 반시계
	{-0.5f,0.5f,0.0f},
	{-0.5f,-0.5f,0.0f},
	{0.0f,-0.5f,0.5f},

	{-0.5f,0.5f,0.0f},
	{0.0f,-0.5f,0.5f},
	{0.0f,0.5f,0.5f},

	{0.0f,0.5f,0.5f},
	{0.0f,-0.5f,0.5f},
	{0.5f,-0.5f,0.0f},

	{0.0f,0.5f,0.5f},
	{0.5f,-0.5f,0.0f},
	{0.5f,0.5f,0.0f},

	{0.5f,0.5f,0.0f},
	{0.5f,-0.5f,0.0f},
	{0.0f,-0.5f,-0.5f},

	{0.5f,0.5f,0.0f},
	{0.0f,-0.5f,-0.5f},
	{0.0f,0.5f,-0.5f},

	{0.0f,0.5f,-0.5f},
	{0.0f,-0.5f,-0.5f},
	{-0.5f,-0.5f,0.0f},

	{0.0f,0.5f,-0.5f},
	{-0.5f,-0.5f,0.0f},
	{-0.5f,0.5f,0.0f},

	//윗면
	{0.0f,0.5f,-0.5f},
	{0.0f,0.5f,0.5f},
	{0.5f,0.5f,0.0f},

	{0.0f,0.5f,-0.5f},
	{-0.5f,0.5f,0.0f},
	{0.0f,0.5f,0.5f},

	//아랫면
	{0.0f,-0.5f,-0.5f},
	{-0.5f,-0.5f,0.0f},
	{0.0f,-0.5f,0.5f},

	{0.0f,-0.5f,-0.5f},
	{0.0f,-0.5f,0.5f},
	{0.5f,-0.5f,0.0f}
};
GLfloat Running_Top[36][3] = {
	// 정면부터 반시계
	{-0.5f,0.5f,0.0f},
	{-0.5f,-0.5f,0.0f},
	{0.0f,-0.5f,0.5f},

	{-0.5f,0.5f,0.0f},
	{0.0f,-0.5f,0.5f},
	{0.0f,0.5f,0.5f},

	{0.0f,0.5f,0.5f},
	{0.0f,-0.5f,0.5f},
	{0.5f,-0.5f,0.0f},

	{0.0f,0.5f,0.5f},
	{0.5f,-0.5f,0.0f},
	{0.5f,0.5f,0.0f},

	{0.5f,0.5f,0.0f},
	{0.5f,-0.5f,0.0f},
	{0.0f,-0.5f,-0.5f},

	{0.5f,0.5f,0.0f},
	{0.0f,-0.5f,-0.5f},
	{0.0f,0.5f,-0.5f},

	{0.0f,0.5f,-0.5f},
	{0.0f,-0.5f,-0.5f},
	{-0.5f,-0.5f,0.0f},

	{0.0f,0.5f,-0.5f},
	{-0.5f,-0.5f,0.0f},
	{-0.5f,0.5f,0.0f},

	//윗면
	{0.0f,0.5f,-0.5f},
	{0.0f,0.5f,0.5f},
	{0.5f,0.5f,0.0f},

	{0.0f,0.5f,-0.5f},
	{-0.5f,0.5f,0.0f},
	{0.0f,0.5f,0.5f},

	//아랫면
	{0.0f,-0.5f,-0.5f},
	{-0.5f,-0.5f,0.0f},
	{0.0f,-0.5f,0.5f},

	{0.0f,-0.5f,-0.5f},
	{0.0f,-0.5f,0.5f},
	{0.5f,-0.5f,0.0f}
};

GLfloat Running_human_body[36][3] = {
	// 정면부터 반시계
	{-0.5f,0.5f,0.0f},
	{-0.5f,-0.5f,0.0f},
	{0.0f,-0.5f,0.5f},

	{-0.5f,0.5f,0.0f},
	{0.0f,-0.5f,0.5f},
	{0.0f,0.5f,0.5f},

	{0.0f,0.5f,0.5f},
	{0.0f,-0.5f,0.5f},
	{0.5f,-0.5f,0.0f},

	{0.0f,0.5f,0.5f},
	{0.5f,-0.5f,0.0f},
	{0.5f,0.5f,0.0f},

	{0.5f,0.5f,0.0f},
	{0.5f,-0.5f,0.0f},
	{0.0f,-0.5f,-0.5f},

	{0.5f,0.5f,0.0f},
	{0.0f,-0.5f,-0.5f},
	{0.0f,0.5f,-0.5f},

	{0.0f,0.5f,-0.5f},
	{0.0f,-0.5f,-0.5f},
	{-0.5f,-0.5f,0.0f},

	{0.0f,0.5f,-0.5f},
	{-0.5f,-0.5f,0.0f},
	{-0.5f,0.5f,0.0f},

	//윗면
	{0.0f,0.5f,-0.5f},
	{0.0f,0.5f,0.5f},
	{0.5f,0.5f,0.0f},

	{0.0f,0.5f,-0.5f},
	{-0.5f,0.5f,0.0f},
	{0.0f,0.5f,0.5f},

	//아랫면
	{0.0f,-0.5f,-0.5f},
	{-0.5f,-0.5f,0.0f},
	{0.0f,-0.5f,0.5f},

	{0.0f,-0.5f,-0.5f},
	{0.0f,-0.5f,0.5f},
	{0.5f,-0.5f,0.0f}
};
GLfloat Running_human_Larm[36][3] = {
	// 정면부터 반시계
	{-0.5f,0.5f,0.0f},
	{-0.5f,-0.5f,0.0f},
	{0.0f,-0.5f,0.5f},

	{-0.5f,0.5f,0.0f},
	{0.0f,-0.5f,0.5f},
	{0.0f,0.5f,0.5f},

	{0.0f,0.5f,0.5f},
	{0.0f,-0.5f,0.5f},
	{0.5f,-0.5f,0.0f},

	{0.0f,0.5f,0.5f},
	{0.5f,-0.5f,0.0f},
	{0.5f,0.5f,0.0f},

	{0.5f,0.5f,0.0f},
	{0.5f,-0.5f,0.0f},
	{0.0f,-0.5f,-0.5f},

	{0.5f,0.5f,0.0f},
	{0.0f,-0.5f,-0.5f},
	{0.0f,0.5f,-0.5f},

	{0.0f,0.5f,-0.5f},
	{0.0f,-0.5f,-0.5f},
	{-0.5f,-0.5f,0.0f},

	{0.0f,0.5f,-0.5f},
	{-0.5f,-0.5f,0.0f},
	{-0.5f,0.5f,0.0f},

	//윗면
	{0.0f,0.5f,-0.5f},
	{0.0f,0.5f,0.5f},
	{0.5f,0.5f,0.0f},

	{0.0f,0.5f,-0.5f},
	{-0.5f,0.5f,0.0f},
	{0.0f,0.5f,0.5f},

	//아랫면
	{0.0f,-0.5f,-0.5f},
	{-0.5f,-0.5f,0.0f},
	{0.0f,-0.5f,0.5f},

	{0.0f,-0.5f,-0.5f},
	{0.0f,-0.5f,0.5f},
	{0.5f,-0.5f,0.0f}
};
GLfloat Running_human_Rarm[36][3] = {
	// 정면부터 반시계
	{-0.5f,0.5f,0.0f},
	{-0.5f,-0.5f,0.0f},
	{0.0f,-0.5f,0.5f},

	{-0.5f,0.5f,0.0f},
	{0.0f,-0.5f,0.5f},
	{0.0f,0.5f,0.5f},

	{0.0f,0.5f,0.5f},
	{0.0f,-0.5f,0.5f},
	{0.5f,-0.5f,0.0f},

	{0.0f,0.5f,0.5f},
	{0.5f,-0.5f,0.0f},
	{0.5f,0.5f,0.0f},

	{0.5f,0.5f,0.0f},
	{0.5f,-0.5f,0.0f},
	{0.0f,-0.5f,-0.5f},

	{0.5f,0.5f,0.0f},
	{0.0f,-0.5f,-0.5f},
	{0.0f,0.5f,-0.5f},

	{0.0f,0.5f,-0.5f},
	{0.0f,-0.5f,-0.5f},
	{-0.5f,-0.5f,0.0f},

	{0.0f,0.5f,-0.5f},
	{-0.5f,-0.5f,0.0f},
	{-0.5f,0.5f,0.0f},

	//윗면
	{0.0f,0.5f,-0.5f},
	{0.0f,0.5f,0.5f},
	{0.5f,0.5f,0.0f},

	{0.0f,0.5f,-0.5f},
	{-0.5f,0.5f,0.0f},
	{0.0f,0.5f,0.5f},

	//아랫면
	{0.0f,-0.5f,-0.5f},
	{-0.5f,-0.5f,0.0f},
	{0.0f,-0.5f,0.5f},

	{0.0f,-0.5f,-0.5f},
	{0.0f,-0.5f,0.5f},
	{0.5f,-0.5f,0.0f}
};
GLfloat Running_human_Lleg[36][3] = {
	// 정면부터 반시계
	{-0.5f,0.5f,0.0f},
	{-0.5f,-0.5f,0.0f},
	{0.0f,-0.5f,0.5f},

	{-0.5f,0.5f,0.0f},
	{0.0f,-0.5f,0.5f},
	{0.0f,0.5f,0.5f},

	{0.0f,0.5f,0.5f},
	{0.0f,-0.5f,0.5f},
	{0.5f,-0.5f,0.0f},

	{0.0f,0.5f,0.5f},
	{0.5f,-0.5f,0.0f},
	{0.5f,0.5f,0.0f},

	{0.5f,0.5f,0.0f},
	{0.5f,-0.5f,0.0f},
	{0.0f,-0.5f,-0.5f},

	{0.5f,0.5f,0.0f},
	{0.0f,-0.5f,-0.5f},
	{0.0f,0.5f,-0.5f},

	{0.0f,0.5f,-0.5f},
	{0.0f,-0.5f,-0.5f},
	{-0.5f,-0.5f,0.0f},

	{0.0f,0.5f,-0.5f},
	{-0.5f,-0.5f,0.0f},
	{-0.5f,0.5f,0.0f},

	//윗면
	{0.0f,0.5f,-0.5f},
	{0.0f,0.5f,0.5f},
	{0.5f,0.5f,0.0f},

	{0.0f,0.5f,-0.5f},
	{-0.5f,0.5f,0.0f},
	{0.0f,0.5f,0.5f},

	//아랫면
	{0.0f,-0.5f,-0.5f},
	{-0.5f,-0.5f,0.0f},
	{0.0f,-0.5f,0.5f},

	{0.0f,-0.5f,-0.5f},
	{0.0f,-0.5f,0.5f},
	{0.5f,-0.5f,0.0f}
};
GLfloat Running_human_Rleg[36][3] = {
	// 정면부터 반시계
	{-0.5f,0.5f,0.0f},
	{-0.5f,-0.5f,0.0f},
	{0.0f,-0.5f,0.5f},

	{-0.5f,0.5f,0.0f},
	{0.0f,-0.5f,0.5f},
	{0.0f,0.5f,0.5f},

	{0.0f,0.5f,0.5f},
	{0.0f,-0.5f,0.5f},
	{0.5f,-0.5f,0.0f},

	{0.0f,0.5f,0.5f},
	{0.5f,-0.5f,0.0f},
	{0.5f,0.5f,0.0f},

	{0.5f,0.5f,0.0f},
	{0.5f,-0.5f,0.0f},
	{0.0f,-0.5f,-0.5f},

	{0.5f,0.5f,0.0f},
	{0.0f,-0.5f,-0.5f},
	{0.0f,0.5f,-0.5f},

	{0.0f,0.5f,-0.5f},
	{0.0f,-0.5f,-0.5f},
	{-0.5f,-0.5f,0.0f},

	{0.0f,0.5f,-0.5f},
	{-0.5f,-0.5f,0.0f},
	{-0.5f,0.5f,0.0f},

	//윗면
	{0.0f,0.5f,-0.5f},
	{0.0f,0.5f,0.5f},
	{0.5f,0.5f,0.0f},

	{0.0f,0.5f,-0.5f},
	{-0.5f,0.5f,0.0f},
	{0.0f,0.5f,0.5f},

	//아랫면
	{0.0f,-0.5f,-0.5f},
	{-0.5f,-0.5f,0.0f},
	{0.0f,-0.5f,0.5f},

	{0.0f,-0.5f,-0.5f},
	{0.0f,-0.5f,0.5f},
	{0.5f,-0.5f,0.0f}
};

//--- 변수 선언
GLuint VAO[11], VBO[2], MID, Tree,Ironbar[3],iron_human[5],Bench[6], Bench_human[7], Running[4], Running_human[5];

void InitBuffer()
{
	glGenVertexArrays(1, &Running_human[4]); //--- VAO 를 지정하고 할당하기
	glBindVertexArray(Running_human[4]); //--- VAO를 바인드하기
	glGenBuffers(2, VBO); //--- 2개의 VBO를 지정하고 할당하기

	glBindBuffer(GL_ARRAY_BUFFER, VBO[0]);
	glBufferData(GL_ARRAY_BUFFER, sizeof(Bench_human_Rleg), Bench_human_Rleg, GL_STATIC_DRAW);
	glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 0, 0);
	glEnableVertexAttribArray(0);
	glBindBuffer(GL_ARRAY_BUFFER, VBO[1]);
	glBufferData(GL_ARRAY_BUFFER, sizeof(Red), Red, GL_STATIC_DRAW);
	glVertexAttribPointer(1, 3, GL_FLOAT, GL_FALSE, 0, 0);
	glEnableVertexAttribArray(1);

	glGenVertexArrays(1, &Running_human[3]); //--- VAO 를 지정하고 할당하기
	glBindVertexArray(Running_human[3]); //--- VAO를 바인드하기
	glGenBuffers(2, VBO); //--- 2개의 VBO를 지정하고 할당하기

	glBindBuffer(GL_ARRAY_BUFFER, VBO[0]);
	glBufferData(GL_ARRAY_BUFFER, sizeof(Bench_human_Lleg), Bench_human_Lleg, GL_STATIC_DRAW);
	glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 0, 0);
	glEnableVertexAttribArray(0);
	glBindBuffer(GL_ARRAY_BUFFER, VBO[1]);
	glBufferData(GL_ARRAY_BUFFER, sizeof(Red), Red, GL_STATIC_DRAW);
	glVertexAttribPointer(1, 3, GL_FLOAT, GL_FALSE, 0, 0);
	glEnableVertexAttribArray(1);

	glGenVertexArrays(1, &Running_human[2]); //--- VAO 를 지정하고 할당하기
	glBindVertexArray(Running_human[2]); //--- VAO를 바인드하기
	glGenBuffers(2, VBO); //--- 2개의 VBO를 지정하고 할당하기

	glBindBuffer(GL_ARRAY_BUFFER, VBO[0]);
	glBufferData(GL_ARRAY_BUFFER, sizeof(Running_human_Rarm), Running_human_Rarm, GL_STATIC_DRAW);
	glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 0, 0);
	glEnableVertexAttribArray(0);
	glBindBuffer(GL_ARRAY_BUFFER, VBO[1]);
	glBufferData(GL_ARRAY_BUFFER, sizeof(Red), Red, GL_STATIC_DRAW);
	glVertexAttribPointer(1, 3, GL_FLOAT, GL_FALSE, 0, 0);
	glEnableVertexAttribArray(1);

	glGenVertexArrays(1, &Running_human[1]); //--- VAO 를 지정하고 할당하기
	glBindVertexArray(Running_human[1]); //--- VAO를 바인드하기
	glGenBuffers(2, VBO); //--- 2개의 VBO를 지정하고 할당하기

	glBindBuffer(GL_ARRAY_BUFFER, VBO[0]);
	glBufferData(GL_ARRAY_BUFFER, sizeof(Running_human_Larm), Running_human_Larm, GL_STATIC_DRAW);
	glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 0, 0);
	glEnableVertexAttribArray(0);
	glBindBuffer(GL_ARRAY_BUFFER, VBO[1]);
	glBufferData(GL_ARRAY_BUFFER, sizeof(Red), Red, GL_STATIC_DRAW);
	glVertexAttribPointer(1, 3, GL_FLOAT, GL_FALSE, 0, 0);
	glEnableVertexAttribArray(1);

	glGenVertexArrays(1, &Running_human[0]); //--- VAO 를 지정하고 할당하기
	glBindVertexArray(Running_human[0]); //--- VAO를 바인드하기
	glGenBuffers(2, VBO); //--- 2개의 VBO를 지정하고 할당하기

	glBindBuffer(GL_ARRAY_BUFFER, VBO[0]);
	glBufferData(GL_ARRAY_BUFFER, sizeof(Running_human_body), Running_human_body, GL_STATIC_DRAW);
	glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 0, 0);
	glEnableVertexAttribArray(0);
	glBindBuffer(GL_ARRAY_BUFFER, VBO[1]);
	glBufferData(GL_ARRAY_BUFFER, sizeof(Red), Red, GL_STATIC_DRAW);
	glVertexAttribPointer(1, 3, GL_FLOAT, GL_FALSE, 0, 0);
	glEnableVertexAttribArray(1);

	glGenVertexArrays(1, &Running[3]); //--- VAO 를 지정하고 할당하기
	glBindVertexArray(Running[3]); //--- VAO를 바인드하기
	glGenBuffers(2, VBO); //--- 2개의 VBO를 지정하고 할당하기

	glBindBuffer(GL_ARRAY_BUFFER, VBO[0]);
	glBufferData(GL_ARRAY_BUFFER, sizeof(Running_Top), Running_Top, GL_STATIC_DRAW);
	glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 0, 0);
	glEnableVertexAttribArray(0);
	glBindBuffer(GL_ARRAY_BUFFER, VBO[1]);
	glBufferData(GL_ARRAY_BUFFER, sizeof(Cyan), Cyan, GL_STATIC_DRAW);
	glVertexAttribPointer(1, 3, GL_FLOAT, GL_FALSE, 0, 0);
	glEnableVertexAttribArray(1);

	glGenVertexArrays(1, &Running[2]); //--- VAO 를 지정하고 할당하기
	glBindVertexArray(Running[2]); //--- VAO를 바인드하기
	glGenBuffers(2, VBO); //--- 2개의 VBO를 지정하고 할당하기

	glBindBuffer(GL_ARRAY_BUFFER, VBO[0]);
	glBufferData(GL_ARRAY_BUFFER, sizeof(Running_Right), Running_Right, GL_STATIC_DRAW);
	glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 0, 0);
	glEnableVertexAttribArray(0);
	glBindBuffer(GL_ARRAY_BUFFER, VBO[1]);
	glBufferData(GL_ARRAY_BUFFER, sizeof(Cyan), Cyan, GL_STATIC_DRAW);
	glVertexAttribPointer(1, 3, GL_FLOAT, GL_FALSE, 0, 0);
	glEnableVertexAttribArray(1);

	glGenVertexArrays(1, &Running[1]); //--- VAO 를 지정하고 할당하기
	glBindVertexArray(Running[1]); //--- VAO를 바인드하기
	glGenBuffers(2, VBO); //--- 2개의 VBO를 지정하고 할당하기

	glBindBuffer(GL_ARRAY_BUFFER, VBO[0]);
	glBufferData(GL_ARRAY_BUFFER, sizeof(Running_Left), Running_Left, GL_STATIC_DRAW);
	glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 0, 0);
	glEnableVertexAttribArray(0);
	glBindBuffer(GL_ARRAY_BUFFER, VBO[1]);
	glBufferData(GL_ARRAY_BUFFER, sizeof(Cyan), Cyan, GL_STATIC_DRAW);
	glVertexAttribPointer(1, 3, GL_FLOAT, GL_FALSE, 0, 0);
	glEnableVertexAttribArray(1);

	glGenVertexArrays(1, &Running[0]); //--- VAO 를 지정하고 할당하기
	glBindVertexArray(Running[0]); //--- VAO를 바인드하기
	glGenBuffers(2, VBO); //--- 2개의 VBO를 지정하고 할당하기

	glBindBuffer(GL_ARRAY_BUFFER, VBO[0]);
	glBufferData(GL_ARRAY_BUFFER, sizeof(Running_board), Running_board, GL_STATIC_DRAW);
	glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 0, 0);
	glEnableVertexAttribArray(0);
	glBindBuffer(GL_ARRAY_BUFFER, VBO[1]);
	glBufferData(GL_ARRAY_BUFFER, sizeof(Cyan), Cyan, GL_STATIC_DRAW);
	glVertexAttribPointer(1, 3, GL_FLOAT, GL_FALSE, 0, 0);
	glEnableVertexAttribArray(1);

	glGenVertexArrays(1, &Bench_human[6]); //--- VAO 를 지정하고 할당하기
	glBindVertexArray(Bench_human[6]); //--- VAO를 바인드하기
	glGenBuffers(2, VBO); //--- 2개의 VBO를 지정하고 할당하기

	glBindBuffer(GL_ARRAY_BUFFER, VBO[0]);
	glBufferData(GL_ARRAY_BUFFER, sizeof(Bench_human_Rleg), Bench_human_Rleg, GL_STATIC_DRAW);
	glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 0, 0);
	glEnableVertexAttribArray(0);
	glBindBuffer(GL_ARRAY_BUFFER, VBO[1]);
	glBufferData(GL_ARRAY_BUFFER, sizeof(Yellow), Yellow, GL_STATIC_DRAW);
	glVertexAttribPointer(1, 3, GL_FLOAT, GL_FALSE, 0, 0);
	glEnableVertexAttribArray(1);

	glGenVertexArrays(1, &Bench_human[5]); //--- VAO 를 지정하고 할당하기
	glBindVertexArray(Bench_human[5]); //--- VAO를 바인드하기
	glGenBuffers(2, VBO); //--- 2개의 VBO를 지정하고 할당하기

	glBindBuffer(GL_ARRAY_BUFFER, VBO[0]);
	glBufferData(GL_ARRAY_BUFFER, sizeof(Bench_human_Lleg), Bench_human_Lleg, GL_STATIC_DRAW);
	glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 0, 0);
	glEnableVertexAttribArray(0);
	glBindBuffer(GL_ARRAY_BUFFER, VBO[1]);
	glBufferData(GL_ARRAY_BUFFER, sizeof(Yellow), Yellow, GL_STATIC_DRAW);
	glVertexAttribPointer(1, 3, GL_FLOAT, GL_FALSE, 0, 0);
	glEnableVertexAttribArray(1);

	glGenVertexArrays(1, &Bench_human[4]); //--- VAO 를 지정하고 할당하기
	glBindVertexArray(Bench_human[4]); //--- VAO를 바인드하기
	glGenBuffers(2, VBO); //--- 2개의 VBO를 지정하고 할당하기

	glBindBuffer(GL_ARRAY_BUFFER, VBO[0]);
	glBufferData(GL_ARRAY_BUFFER, sizeof(Bench_human_Rarm2), Bench_human_Rarm2, GL_STATIC_DRAW);
	glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 0, 0);
	glEnableVertexAttribArray(0);
	glBindBuffer(GL_ARRAY_BUFFER, VBO[1]);
	glBufferData(GL_ARRAY_BUFFER, sizeof(Yellow), Yellow, GL_STATIC_DRAW);
	glVertexAttribPointer(1, 3, GL_FLOAT, GL_FALSE, 0, 0);
	glEnableVertexAttribArray(1);

	glGenVertexArrays(1, &Bench_human[3]); //--- VAO 를 지정하고 할당하기
	glBindVertexArray(Bench_human[3]); //--- VAO를 바인드하기
	glGenBuffers(2, VBO); //--- 2개의 VBO를 지정하고 할당하기

	glBindBuffer(GL_ARRAY_BUFFER, VBO[0]);
	glBufferData(GL_ARRAY_BUFFER, sizeof(Bench_human_Rarm1), Bench_human_Rarm1, GL_STATIC_DRAW);
	glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 0, 0);
	glEnableVertexAttribArray(0);
	glBindBuffer(GL_ARRAY_BUFFER, VBO[1]);
	glBufferData(GL_ARRAY_BUFFER, sizeof(Yellow), Yellow, GL_STATIC_DRAW);
	glVertexAttribPointer(1, 3, GL_FLOAT, GL_FALSE, 0, 0);
	glEnableVertexAttribArray(1);

	glGenVertexArrays(1, &Bench_human[2]); //--- VAO 를 지정하고 할당하기
	glBindVertexArray(Bench_human[2]); //--- VAO를 바인드하기
	glGenBuffers(2, VBO); //--- 2개의 VBO를 지정하고 할당하기

	glBindBuffer(GL_ARRAY_BUFFER, VBO[0]);
	glBufferData(GL_ARRAY_BUFFER, sizeof(Bench_human_Larm2), Bench_human_Larm2, GL_STATIC_DRAW);
	glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 0, 0);
	glEnableVertexAttribArray(0);
	glBindBuffer(GL_ARRAY_BUFFER, VBO[1]);
	glBufferData(GL_ARRAY_BUFFER, sizeof(Yellow), Yellow, GL_STATIC_DRAW);
	glVertexAttribPointer(1, 3, GL_FLOAT, GL_FALSE, 0, 0);
	glEnableVertexAttribArray(1);

	glGenVertexArrays(1, &Bench_human[1]); //--- VAO 를 지정하고 할당하기
	glBindVertexArray(Bench_human[1]); //--- VAO를 바인드하기
	glGenBuffers(2, VBO); //--- 2개의 VBO를 지정하고 할당하기

	glBindBuffer(GL_ARRAY_BUFFER, VBO[0]);
	glBufferData(GL_ARRAY_BUFFER, sizeof(Bench_human_Larm1), Bench_human_Larm1, GL_STATIC_DRAW);
	glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 0, 0);
	glEnableVertexAttribArray(0);
	glBindBuffer(GL_ARRAY_BUFFER, VBO[1]);
	glBufferData(GL_ARRAY_BUFFER, sizeof(Yellow), Yellow, GL_STATIC_DRAW);
	glVertexAttribPointer(1, 3, GL_FLOAT, GL_FALSE, 0, 0);
	glEnableVertexAttribArray(1);

	glGenVertexArrays(1, &Bench_human[0]); //--- VAO 를 지정하고 할당하기
	glBindVertexArray(Bench_human[0]); //--- VAO를 바인드하기
	glGenBuffers(2, VBO); //--- 2개의 VBO를 지정하고 할당하기

	glBindBuffer(GL_ARRAY_BUFFER, VBO[0]);
	glBufferData(GL_ARRAY_BUFFER, sizeof(Bench_human_body), Bench_human_body, GL_STATIC_DRAW);
	glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 0, 0);
	glEnableVertexAttribArray(0);
	glBindBuffer(GL_ARRAY_BUFFER, VBO[1]);
	glBufferData(GL_ARRAY_BUFFER, sizeof(Yellow), Yellow, GL_STATIC_DRAW);
	glVertexAttribPointer(1, 3, GL_FLOAT, GL_FALSE, 0, 0);
	glEnableVertexAttribArray(1);

	glGenVertexArrays(1, &Bench[5]); //--- VAO 를 지정하고 할당하기
	glBindVertexArray(Bench[5]); //--- VAO를 바인드하기
	glGenBuffers(2, VBO); //--- 2개의 VBO를 지정하고 할당하기

	glBindBuffer(GL_ARRAY_BUFFER, VBO[0]);
	glBufferData(GL_ARRAY_BUFFER, sizeof(Bench_bar), Bench_bar, GL_STATIC_DRAW);
	glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 0, 0);
	glEnableVertexAttribArray(0);
	glBindBuffer(GL_ARRAY_BUFFER, VBO[1]);
	glBufferData(GL_ARRAY_BUFFER, sizeof(Red), Red, GL_STATIC_DRAW);
	glVertexAttribPointer(1, 3, GL_FLOAT, GL_FALSE, 0, 0);
	glEnableVertexAttribArray(1);

	glGenVertexArrays(1, &Bench[4]); //--- VAO 를 지정하고 할당하기
	glBindVertexArray(Bench[4]); //--- VAO를 바인드하기
	glGenBuffers(2, VBO); //--- 2개의 VBO를 지정하고 할당하기

	glBindBuffer(GL_ARRAY_BUFFER, VBO[0]);
	glBufferData(GL_ARRAY_BUFFER, sizeof(Bench_board), Bench_board, GL_STATIC_DRAW);
	glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 0, 0);
	glEnableVertexAttribArray(0);
	glBindBuffer(GL_ARRAY_BUFFER, VBO[1]);
	glBufferData(GL_ARRAY_BUFFER, sizeof(Red), Red, GL_STATIC_DRAW);
	glVertexAttribPointer(1, 3, GL_FLOAT, GL_FALSE, 0, 0);
	glEnableVertexAttribArray(1);

	glGenVertexArrays(1, &Bench[3]); //--- VAO 를 지정하고 할당하기
	glBindVertexArray(Bench[3]); //--- VAO를 바인드하기
	glGenBuffers(2, VBO); //--- 2개의 VBO를 지정하고 할당하기

	glBindBuffer(GL_ARRAY_BUFFER, VBO[0]);
	glBufferData(GL_ARRAY_BUFFER, sizeof(Bench_leg4), Bench_leg4, GL_STATIC_DRAW);
	glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 0, 0);
	glEnableVertexAttribArray(0);
	glBindBuffer(GL_ARRAY_BUFFER, VBO[1]);
	glBufferData(GL_ARRAY_BUFFER, sizeof(Red), Red, GL_STATIC_DRAW);
	glVertexAttribPointer(1, 3, GL_FLOAT, GL_FALSE, 0, 0);
	glEnableVertexAttribArray(1);

	glGenVertexArrays(1, &Bench[2]); //--- VAO 를 지정하고 할당하기
	glBindVertexArray(Bench[2]); //--- VAO를 바인드하기
	glGenBuffers(2, VBO); //--- 2개의 VBO를 지정하고 할당하기

	glBindBuffer(GL_ARRAY_BUFFER, VBO[0]);
	glBufferData(GL_ARRAY_BUFFER, sizeof(Bench_leg3), Bench_leg3, GL_STATIC_DRAW);
	glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 0, 0);
	glEnableVertexAttribArray(0);
	glBindBuffer(GL_ARRAY_BUFFER, VBO[1]);
	glBufferData(GL_ARRAY_BUFFER, sizeof(Red), Red, GL_STATIC_DRAW);
	glVertexAttribPointer(1, 3, GL_FLOAT, GL_FALSE, 0, 0);
	glEnableVertexAttribArray(1);

	glGenVertexArrays(1, &Bench[1]); //--- VAO 를 지정하고 할당하기
	glBindVertexArray(Bench[1]); //--- VAO를 바인드하기
	glGenBuffers(2, VBO); //--- 2개의 VBO를 지정하고 할당하기

	glBindBuffer(GL_ARRAY_BUFFER, VBO[0]);
	glBufferData(GL_ARRAY_BUFFER, sizeof(Bench_leg2), Bench_leg2, GL_STATIC_DRAW);
	glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 0, 0);
	glEnableVertexAttribArray(0);
	glBindBuffer(GL_ARRAY_BUFFER, VBO[1]);
	glBufferData(GL_ARRAY_BUFFER, sizeof(Red), Red, GL_STATIC_DRAW);
	glVertexAttribPointer(1, 3, GL_FLOAT, GL_FALSE, 0, 0);
	glEnableVertexAttribArray(1);

	glGenVertexArrays(1, &Bench[0]); //--- VAO 를 지정하고 할당하기
	glBindVertexArray(Bench[0]); //--- VAO를 바인드하기
	glGenBuffers(2, VBO); //--- 2개의 VBO를 지정하고 할당하기

	glBindBuffer(GL_ARRAY_BUFFER, VBO[0]);
	glBufferData(GL_ARRAY_BUFFER, sizeof(Bench_leg1), Bench_leg1, GL_STATIC_DRAW);
	glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 0, 0);
	glEnableVertexAttribArray(0);
	glBindBuffer(GL_ARRAY_BUFFER, VBO[1]);
	glBufferData(GL_ARRAY_BUFFER, sizeof(Red), Red, GL_STATIC_DRAW);
	glVertexAttribPointer(1, 3, GL_FLOAT, GL_FALSE, 0, 0);
	glEnableVertexAttribArray(1);

	glGenVertexArrays(1, &iron_human[4]); //--- VAO 를 지정하고 할당하기
	glBindVertexArray(iron_human[4]); //--- VAO를 바인드하기
	glGenBuffers(2, VBO); //--- 2개의 VBO를 지정하고 할당하기

	glBindBuffer(GL_ARRAY_BUFFER, VBO[0]);
	glBufferData(GL_ARRAY_BUFFER, sizeof(IronBar_human_Rleg), IronBar_human_Rleg, GL_STATIC_DRAW);
	glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 0, 0);
	glEnableVertexAttribArray(0);
	glBindBuffer(GL_ARRAY_BUFFER, VBO[1]);
	glBufferData(GL_ARRAY_BUFFER, sizeof(Red), Red, GL_STATIC_DRAW);
	glVertexAttribPointer(1, 3, GL_FLOAT, GL_FALSE, 0, 0);
	glEnableVertexAttribArray(1);

	glGenVertexArrays(1, &iron_human[3]); //--- VAO 를 지정하고 할당하기
	glBindVertexArray(iron_human[3]); //--- VAO를 바인드하기
	glGenBuffers(2, VBO); //--- 2개의 VBO를 지정하고 할당하기

	glBindBuffer(GL_ARRAY_BUFFER, VBO[0]);
	glBufferData(GL_ARRAY_BUFFER, sizeof(IronBar_human_Lleg), IronBar_human_Lleg, GL_STATIC_DRAW);
	glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 0, 0);
	glEnableVertexAttribArray(0);
	glBindBuffer(GL_ARRAY_BUFFER, VBO[1]);
	glBufferData(GL_ARRAY_BUFFER, sizeof(Red), Red, GL_STATIC_DRAW);
	glVertexAttribPointer(1, 3, GL_FLOAT, GL_FALSE, 0, 0);
	glEnableVertexAttribArray(1);

	glGenVertexArrays(1, &iron_human[2]); //--- VAO 를 지정하고 할당하기
	glBindVertexArray(iron_human[2]); //--- VAO를 바인드하기
	glGenBuffers(2, VBO); //--- 2개의 VBO를 지정하고 할당하기

	glBindBuffer(GL_ARRAY_BUFFER, VBO[0]);
	glBufferData(GL_ARRAY_BUFFER, sizeof(IronBar_human_Rarm), IronBar_human_Rarm, GL_STATIC_DRAW);
	glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 0, 0);
	glEnableVertexAttribArray(0);
	glBindBuffer(GL_ARRAY_BUFFER, VBO[1]);
	glBufferData(GL_ARRAY_BUFFER, sizeof(Red), Red, GL_STATIC_DRAW);
	glVertexAttribPointer(1, 3, GL_FLOAT, GL_FALSE, 0, 0);
	glEnableVertexAttribArray(1);

	glGenVertexArrays(1, &iron_human[1]); //--- VAO 를 지정하고 할당하기
	glBindVertexArray(iron_human[1]); //--- VAO를 바인드하기
	glGenBuffers(2, VBO); //--- 2개의 VBO를 지정하고 할당하기

	glBindBuffer(GL_ARRAY_BUFFER, VBO[0]);
	glBufferData(GL_ARRAY_BUFFER, sizeof(IronBar_human_Larm), IronBar_human_Larm, GL_STATIC_DRAW);
	glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 0, 0);
	glEnableVertexAttribArray(0);
	glBindBuffer(GL_ARRAY_BUFFER, VBO[1]);
	glBufferData(GL_ARRAY_BUFFER, sizeof(Red), Red, GL_STATIC_DRAW);
	glVertexAttribPointer(1, 3, GL_FLOAT, GL_FALSE, 0, 0);
	glEnableVertexAttribArray(1);

	glGenVertexArrays(1, &iron_human[0]); //--- VAO 를 지정하고 할당하기
	glBindVertexArray(iron_human[0]); //--- VAO를 바인드하기
	glGenBuffers(2, VBO); //--- 2개의 VBO를 지정하고 할당하기

	glBindBuffer(GL_ARRAY_BUFFER, VBO[0]);
	glBufferData(GL_ARRAY_BUFFER, sizeof(IronBar_human_body), IronBar_human_body, GL_STATIC_DRAW);
	glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 0, 0);
	glEnableVertexAttribArray(0);
	glBindBuffer(GL_ARRAY_BUFFER, VBO[1]);
	glBufferData(GL_ARRAY_BUFFER, sizeof(Red), Red, GL_STATIC_DRAW);
	glVertexAttribPointer(1, 3, GL_FLOAT, GL_FALSE, 0, 0);
	glEnableVertexAttribArray(1);

	glGenVertexArrays(1, &Ironbar[2]); //--- VAO 를 지정하고 할당하기
	glBindVertexArray(Ironbar[2]); //--- VAO를 바인드하기
	glGenBuffers(2, VBO); //--- 2개의 VBO를 지정하고 할당하기

	glBindBuffer(GL_ARRAY_BUFFER, VBO[0]);
	glBufferData(GL_ARRAY_BUFFER, sizeof(IronBar_top), IronBar_top, GL_STATIC_DRAW);
	glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 0, 0);
	glEnableVertexAttribArray(0);
	glBindBuffer(GL_ARRAY_BUFFER, VBO[1]);
	glBufferData(GL_ARRAY_BUFFER, sizeof(Yellow), Yellow, GL_STATIC_DRAW);
	glVertexAttribPointer(1, 3, GL_FLOAT, GL_FALSE, 0, 0);
	glEnableVertexAttribArray(1);

	glGenVertexArrays(1, &Ironbar[1]); //--- VAO 를 지정하고 할당하기
	glBindVertexArray(Ironbar[1]); //--- VAO를 바인드하기
	glGenBuffers(2, VBO); //--- 2개의 VBO를 지정하고 할당하기

	glBindBuffer(GL_ARRAY_BUFFER, VBO[0]);
	glBufferData(GL_ARRAY_BUFFER, sizeof(IronBar_right), IronBar_right, GL_STATIC_DRAW);
	glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 0, 0);
	glEnableVertexAttribArray(0);
	glBindBuffer(GL_ARRAY_BUFFER, VBO[1]);
	glBufferData(GL_ARRAY_BUFFER, sizeof(Yellow), Yellow, GL_STATIC_DRAW);
	glVertexAttribPointer(1, 3, GL_FLOAT, GL_FALSE, 0, 0);
	glEnableVertexAttribArray(1);

	glGenVertexArrays(1, &Ironbar[0]); //--- VAO 를 지정하고 할당하기
	glBindVertexArray(Ironbar[0]); //--- VAO를 바인드하기
	glGenBuffers(2, VBO); //--- 2개의 VBO를 지정하고 할당하기

	glBindBuffer(GL_ARRAY_BUFFER, VBO[0]);
	glBufferData(GL_ARRAY_BUFFER, sizeof(IronBar_left), IronBar_left, GL_STATIC_DRAW);
	glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 0, 0);
	glEnableVertexAttribArray(0);
	glBindBuffer(GL_ARRAY_BUFFER, VBO[1]);
	glBufferData(GL_ARRAY_BUFFER, sizeof(Yellow), Yellow, GL_STATIC_DRAW);
	glVertexAttribPointer(1, 3, GL_FLOAT, GL_FALSE, 0, 0);
	glEnableVertexAttribArray(1);

	glGenVertexArrays(1, &Tree); //--- VAO 를 지정하고 할당하기
	glBindVertexArray(Tree); //--- VAO를 바인드하기
	glGenBuffers(2, VBO); //--- 2개의 VBO를 지정하고 할당하기

	glBindBuffer(GL_ARRAY_BUFFER, VBO[0]);
	glBufferData(GL_ARRAY_BUFFER, sizeof(Treebottom), Treebottom, GL_STATIC_DRAW);
	glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 0, 0);
	glEnableVertexAttribArray(0);
	glBindBuffer(GL_ARRAY_BUFFER, VBO[1]);
	glBufferData(GL_ARRAY_BUFFER, sizeof(Cyan), Cyan, GL_STATIC_DRAW);
	glVertexAttribPointer(1, 3, GL_FLOAT, GL_FALSE, 0, 0);
	glEnableVertexAttribArray(1);

	glGenVertexArrays(1, &MID); //--- VAO 를 지정하고 할당하기
	glBindVertexArray(MID); //--- VAO를 바인드하기
	glGenBuffers(2, VBO); //--- 2개의 VBO를 지정하고 할당하기

	glBindBuffer(GL_ARRAY_BUFFER, VBO[0]);
	glBufferData(GL_ARRAY_BUFFER, sizeof(Midnemo), Midnemo, GL_STATIC_DRAW);
	glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 0, 0);
	glEnableVertexAttribArray(0);
	glBindBuffer(GL_ARRAY_BUFFER, VBO[1]);
	glBufferData(GL_ARRAY_BUFFER, sizeof(Yellow), Yellow, GL_STATIC_DRAW);
	glVertexAttribPointer(1, 3, GL_FLOAT, GL_FALSE, 0, 0);
	glEnableVertexAttribArray(1);


	glGenVertexArrays(1, &VAO[0]); //--- VAO 를 지정하고 할당하기
	glBindVertexArray(VAO[0]); //--- VAO를 바인드하기
	glGenBuffers(2, VBO); //--- 2개의 VBO를 지정하고 할당하기

	glBindBuffer(GL_ARRAY_BUFFER, VBO[0]);
	glBufferData(GL_ARRAY_BUFFER, sizeof(Stage), Stage, GL_STATIC_DRAW);
	glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 0, 0);
	glEnableVertexAttribArray(0);
	glBindBuffer(GL_ARRAY_BUFFER, VBO[1]);
	glBufferData(GL_ARRAY_BUFFER, sizeof(StageC), StageC, GL_STATIC_DRAW);
	glVertexAttribPointer(1, 3, GL_FLOAT, GL_FALSE, 0, 0);
	glEnableVertexAttribArray(1);

	glGenVertexArrays(1, &VAO[1]); //--- VAO 를 지정하고 할당하기
	glBindVertexArray(VAO[1]); //--- VAO를 바인드하기
	glGenBuffers(2, VBO); //--- 2개의 VBO를 지정하고 할당하기

	glBindBuffer(GL_ARRAY_BUFFER, VBO[0]);
	glBufferData(GL_ARRAY_BUFFER, sizeof(Head), Head, GL_STATIC_DRAW);
	glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 0, 0);
	glEnableVertexAttribArray(0);
	glBindBuffer(GL_ARRAY_BUFFER, VBO[1]);
	glBufferData(GL_ARRAY_BUFFER, sizeof(Red), Red, GL_STATIC_DRAW);
	glVertexAttribPointer(1, 3, GL_FLOAT, GL_FALSE, 0, 0);
	glEnableVertexAttribArray(1);

	glGenVertexArrays(1, &VAO[2]); //--- VAO 를 지정하고 할당하기
	glBindVertexArray(VAO[2]); //--- VAO를 바인드하기
	glGenBuffers(2, VBO); //--- 2개의 VBO를 지정하고 할당하기

	glBindBuffer(GL_ARRAY_BUFFER, VBO[0]);
	glBufferData(GL_ARRAY_BUFFER, sizeof(Body), Body, GL_STATIC_DRAW);
	glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 0, 0);
	glEnableVertexAttribArray(0);
	glBindBuffer(GL_ARRAY_BUFFER, VBO[1]);
	glBufferData(GL_ARRAY_BUFFER, sizeof(Yellow), Yellow, GL_STATIC_DRAW);
	glVertexAttribPointer(1, 3, GL_FLOAT, GL_FALSE, 0, 0);
	glEnableVertexAttribArray(1);

	glGenVertexArrays(1, &VAO[3]); //--- VAO 를 지정하고 할당하기
	glBindVertexArray(VAO[3]); //--- VAO를 바인드하기
	glGenBuffers(2, VBO); //--- 2개의 VBO를 지정하고 할당하기

	glBindBuffer(GL_ARRAY_BUFFER, VBO[0]);
	glBufferData(GL_ARRAY_BUFFER, sizeof(Arm_left), Arm_left, GL_STATIC_DRAW);
	glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 0, 0);
	glEnableVertexAttribArray(0);
	glBindBuffer(GL_ARRAY_BUFFER, VBO[1]);
	glBufferData(GL_ARRAY_BUFFER, sizeof(Cyan), Cyan, GL_STATIC_DRAW);
	glVertexAttribPointer(1, 3, GL_FLOAT, GL_FALSE, 0, 0);
	glEnableVertexAttribArray(1);

	glGenVertexArrays(1, &VAO[4]); //--- VAO 를 지정하고 할당하기
	glBindVertexArray(VAO[4]); //--- VAO를 바인드하기
	glGenBuffers(2, VBO); //--- 2개의 VBO를 지정하고 할당하기

	glBindBuffer(GL_ARRAY_BUFFER, VBO[0]);
	glBufferData(GL_ARRAY_BUFFER, sizeof(Arm_right), Arm_right, GL_STATIC_DRAW);
	glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 0, 0);
	glEnableVertexAttribArray(0);
	glBindBuffer(GL_ARRAY_BUFFER, VBO[1]);
	glBufferData(GL_ARRAY_BUFFER, sizeof(Yellow), Yellow, GL_STATIC_DRAW);
	glVertexAttribPointer(1, 3, GL_FLOAT, GL_FALSE, 0, 0);
	glEnableVertexAttribArray(1);

	glGenVertexArrays(1, &VAO[5]); //--- VAO 를 지정하고 할당하기
	glBindVertexArray(VAO[5]); //--- VAO를 바인드하기
	glGenBuffers(2, VBO); //--- 2개의 VBO를 지정하고 할당하기

	glBindBuffer(GL_ARRAY_BUFFER, VBO[0]);
	glBufferData(GL_ARRAY_BUFFER, sizeof(Leg_left), Leg_left, GL_STATIC_DRAW);
	glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 0, 0);
	glEnableVertexAttribArray(0);
	glBindBuffer(GL_ARRAY_BUFFER, VBO[1]);
	glBufferData(GL_ARRAY_BUFFER, sizeof(Cyan), Cyan, GL_STATIC_DRAW);
	glVertexAttribPointer(1, 3, GL_FLOAT, GL_FALSE, 0, 0);
	glEnableVertexAttribArray(1);

	glGenVertexArrays(1, &VAO[6]); //--- VAO 를 지정하고 할당하기
	glBindVertexArray(VAO[6]); //--- VAO를 바인드하기
	glGenBuffers(2, VBO); //--- 2개의 VBO를 지정하고 할당하기

	glBindBuffer(GL_ARRAY_BUFFER, VBO[0]);
	glBufferData(GL_ARRAY_BUFFER, sizeof(Leg_right), Leg_right, GL_STATIC_DRAW);
	glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 0, 0);
	glEnableVertexAttribArray(0);
	glBindBuffer(GL_ARRAY_BUFFER, VBO[1]);
	glBufferData(GL_ARRAY_BUFFER, sizeof(Yellow), Yellow, GL_STATIC_DRAW);
	glVertexAttribPointer(1, 3, GL_FLOAT, GL_FALSE, 0, 0);
	glEnableVertexAttribArray(1);

	glGenVertexArrays(1, &VAO[7]); //--- VAO 를 지정하고 할당하기
	glBindVertexArray(VAO[7]); //--- VAO를 바인드하기
	glGenBuffers(2, VBO); //--- 2개의 VBO를 지정하고 할당하기

	glBindBuffer(GL_ARRAY_BUFFER, VBO[0]);
	glBufferData(GL_ARRAY_BUFFER, sizeof(StageF), StageF, GL_STATIC_DRAW);
	glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 0, 0);
	glEnableVertexAttribArray(0);
	glBindBuffer(GL_ARRAY_BUFFER, VBO[1]);
	glBufferData(GL_ARRAY_BUFFER, sizeof(StageFC), StageFC, GL_STATIC_DRAW);
	glVertexAttribPointer(1, 3, GL_FLOAT, GL_FALSE, 0, 0);
	glEnableVertexAttribArray(1);

	glGenVertexArrays(1, &VAO[8]); //--- VAO 를 지정하고 할당하기
	glBindVertexArray(VAO[8]); //--- VAO를 바인드하기
	glGenBuffers(2, VBO); //--- 2개의 VBO를 지정하고 할당하기

	glBindBuffer(GL_ARRAY_BUFFER, VBO[0]);
	glBufferData(GL_ARRAY_BUFFER, sizeof(L_eye), L_eye, GL_STATIC_DRAW);
	glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 0, 0);
	glEnableVertexAttribArray(0);
	glBindBuffer(GL_ARRAY_BUFFER, VBO[1]);
	glBufferData(GL_ARRAY_BUFFER, sizeof(Cyan), Cyan, GL_STATIC_DRAW);
	glVertexAttribPointer(1, 3, GL_FLOAT, GL_FALSE, 0, 0);
	glEnableVertexAttribArray(1);

	glGenVertexArrays(1, &VAO[9]); //--- VAO 를 지정하고 할당하기
	glBindVertexArray(VAO[9]); //--- VAO를 바인드하기
	glGenBuffers(2, VBO); //--- 2개의 VBO를 지정하고 할당하기

	glBindBuffer(GL_ARRAY_BUFFER, VBO[0]);
	glBufferData(GL_ARRAY_BUFFER, sizeof(R_eye), R_eye, GL_STATIC_DRAW);
	glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 0, 0);
	glEnableVertexAttribArray(0);
	glBindBuffer(GL_ARRAY_BUFFER, VBO[1]);
	glBufferData(GL_ARRAY_BUFFER, sizeof(Cyan), Cyan, GL_STATIC_DRAW);
	glVertexAttribPointer(1, 3, GL_FLOAT, GL_FALSE, 0, 0);
	glEnableVertexAttribArray(1);

	glGenVertexArrays(1, &VAO[10]); //--- VAO 를 지정하고 할당하기
	glBindVertexArray(VAO[10]); //--- VAO를 바인드하기
	glGenBuffers(2, VBO); //--- 2개의 VBO를 지정하고 할당하기

	glBindBuffer(GL_ARRAY_BUFFER, VBO[0]);
	glBufferData(GL_ARRAY_BUFFER, sizeof(Nose), Nose, GL_STATIC_DRAW);
	glVertexAttribPointer(0, 3, GL_FLOAT, GL_FALSE, 0, 0);
	glEnableVertexAttribArray(0);
	glBindBuffer(GL_ARRAY_BUFFER, VBO[1]);
	glBufferData(GL_ARRAY_BUFFER, sizeof(Cyan), Cyan, GL_STATIC_DRAW);
	glVertexAttribPointer(1, 3, GL_FLOAT, GL_FALSE, 0, 0);
	glEnableVertexAttribArray(1);

}

GLuint shaderID;
GLint width = 1200;
GLint height = 1200;

void main(int argc, char** argv) //--- 윈도우 출력하고 콜백함수 설정
{
	//--- 윈도우 생성하기
	glutInit(&argc, argv); // glut 초기화
	glutInitDisplayMode(GLUT_DOUBLE | GLUT_RGBA); // 디스플레이 모드 설정
	glutInitWindowPosition(100, 100); // 윈도우의 위치 지정
	glutInitWindowSize(width, height); // 윈도우의 크기 지정
	glutCreateWindow("Example1"); // 윈도우 생성(윈도우 이름)
		//--- GLEW 초기화하기
	glewExperimental = GL_TRUE;
	if (glewInit() != GLEW_OK) // glew 초기화
	{
		cerr << "Unable to initialize GLEW" << endl;
		exit(EXIT_FAILURE);
	}
	else
		std::cout << "GLEW Initialized\n";

	shaderID = make_shaderProgram();
	InitBuffer();

	glutDisplayFunc(drawScene); // 출력 콜백함수의 지정
	glutReshapeFunc(Reshape); // 다시 그리기 콜백함수 지정
	glutKeyboardFunc(Keyboard);
	glutTimerFunc(10, Timer, 1);

	glutMainLoop(); // 이벤트 처리 시작
}

float timecount = 0;
float Head_Pos[3] = { 0.0f,-0.3f,0.5f };

float Cam_x = 0.0f;
float Cam_y = 0.0f;
float Cam_z = 5.0f;

float lookPos[3] = { 0.0f,0.0f,0.0f };

float Angle = 0;
float Angle2 = 0;

float Body_R_count = 0.0f;
float Arm_R_count = 0.0f;

float Bench_rad = 0.0f;

float Tree_size = 0.5f;

float dumb_pos[3] = { -1.3f,-0.3f,-1.2f };

float run_rad = 0.0f;

float iron_body_pos[3] = {1.5f,-0.6f,-1.0f };
float bench_body_pos[3] = { -1.35f,-0.6f,-1.2f };
float running_body_pos[3] = { -1.0f,-0.6f,1.2f };

float ironbar_rad = 0.0f;

GLvoid drawScene() //--- 콜백 함수: 그리기 콜백 함수
{
	//--- 변경된 배경색 설정
	glClearColor(1.0f, 1.0f, 1.0f, 1.0f); // 바탕색을 변경
	glClear(GL_COLOR_BUFFER_BIT | GL_DEPTH_BUFFER_BIT); // 설정된 색으로 전체를 칠하기

	glUseProgram(shaderID);

	glEnable(GL_DEPTH_TEST);
	glEnable(GL_CULL_FACE);

	int modelLoc = glGetUniformLocation(shaderID, "Transform"); //--- 버텍스 세이더에서 모델링 변환 행렬 변수값을 받아온다.
	int viewLoc = glGetUniformLocation(shaderID, "viewTransform"); //--- 버텍스 세이더에서 뷰잉 변환 행렬 변수값을 받아온다.
	int projLoc = glGetUniformLocation(shaderID, "projectionTransform"); //--- 버텍스 세이더에서 투영 변환 행렬 변수값을 받아온다.
	//--- 모델링 변환
	glm::mat4 mTransform = glm::mat4(1.0f);
	mTransform = glm::rotate(mTransform, glm::radians(0.0f), glm::vec3(0.0f, 1.0f, 0.0f));
	//--- 뷰잉 변환
	glm::vec3 cameraPos = glm::vec3(Cam_x, Cam_y, Cam_z);
	glm::vec3 cameraDirection = glm::vec3(lookPos[0], lookPos[1], lookPos[2]);
	glm::vec3 cameraUp = glm::vec3(0.0f, 1.0f, 0.0f);
	glm::mat4 vTransform = glm::mat4(1.0f);
	glm::mat4 vTrans = glm::mat4(1.0f);
	glm::mat4 vrotate = glm::mat4(1.0f);
	glm::mat4 vTR = glm::mat4(1.0f);
	vTrans = glm::translate(vTrans, glm::vec3(-Cam_x, -Cam_y, -Cam_z));
	vTR = glm::translate(vTR, glm::vec3(Cam_x, Cam_y, Cam_z));
	vrotate = glm::rotate(vrotate, glm::radians(Angle2), glm::vec3(0.0f, 1.0f, 0.0f));
	vTransform = glm::lookAt(cameraPos, cameraDirection, cameraUp);
	vTransform = vTransform * vTR * vrotate * vTrans;
	glUniformMatrix4fv(viewLoc, 1, GL_FALSE, glm::value_ptr(vTransform));
	//--- 투영 변환 행렬을 설정한 후, 버텍스 세이더에 저장한다.
	glm::mat4 pTransform = glm::mat4(1.0f);
	glm::mat4 pTransform1 = glm::mat4(1.0f);
	pTransform = glm::perspective(glm::radians(60.0f), (float)width / (float)height, 0.1f, 50.0f);
	glUniformMatrix4fv(projLoc, 1, GL_FALSE, glm::value_ptr(pTransform));

	// 움직이는 사람
	{
		glm::mat4 StageS = glm::mat4(1.0f);
		glm::mat4 StageFT = glm::mat4(1.0f);

		glm::mat4 Basic = glm::mat4(1.0f);
		glm::mat4 B_Tran = glm::mat4(1.0f);
		glm::mat4 B_TranR = glm::mat4(1.0f);
		glm::mat4 B_TranRR = glm::mat4(1.0f);
		glm::mat4 B_Rotate = glm::mat4(1.0f);
		glm::mat4 B_Scale = glm::mat4(1.0f);

		glm::mat4 Body_R = glm::mat4(1.0f);

		glm::mat4 Head_T = glm::mat4(1.0f);
		glm::mat4 L_eye_T = glm::mat4(1.0f);
		glm::mat4 R_eye_T = glm::mat4(1.0f);
		glm::mat4 Nose_T = glm::mat4(1.0f);
		glm::mat4 Head_TR = glm::mat4(1.0f);
		glm::mat4 L_eye_TR = glm::mat4(1.0f);
		glm::mat4 R_eye_TR = glm::mat4(1.0f);
		glm::mat4 Nose_TR = glm::mat4(1.0f);
		glm::mat4 eye_S = glm::mat4(1.0f);

		glm::mat4 Body_T = glm::mat4(1.0f);

		glm::mat4 L_Arm_T = glm::mat4(1.0f);
		glm::mat4 R_Arm_T = glm::mat4(1.0f);
		glm::mat4 L_Leg_T = glm::mat4(1.0f);
		glm::mat4 R_Leg_T = glm::mat4(1.0f);
		glm::mat4 Arm_S = glm::mat4(1.0f);

		glm::mat4 Arm_Rotate_cw = glm::mat4(1.0f);
		glm::mat4 Arm_Rotate_ccw = glm::mat4(1.0f);

		Arm_Rotate_cw = glm::rotate(Arm_Rotate_cw, glm::radians(Arm_R_count), glm::vec3(1.0f, 0.0f, 0.0));
		Arm_Rotate_ccw = glm::rotate(Arm_Rotate_ccw, glm::radians(-Arm_R_count), glm::vec3(1.0f, 0.0f, 0.0));

		B_Tran = glm::translate(B_Tran, glm::vec3(0.0f, -1.0f, -0.5f));
		B_TranR = glm::translate(B_TranR, glm::vec3(0.0f, -0.5f, 0.0f));
		B_TranRR = glm::translate(B_TranRR, glm::vec3(0.0f, 0.5f, 0.0f));
		B_Rotate = glm::rotate(B_Rotate, glm::radians(45.0f), glm::vec3(0.0f, 1.0f, 0.0));
		B_Scale = glm::scale(B_Scale, glm::vec3(0.5f, 0.3f, 0.5f));

		Basic = B_Scale * B_Tran;		// 전체 배치

		Body_R = glm::rotate(Body_R, glm::radians(Body_R_count), glm::vec3(0.0f, 1.0f, 0.0));

		Head_T = glm::translate(Head_T, glm::vec3(Head_Pos[0], Head_Pos[1], Head_Pos[2]));
		L_eye_T = glm::translate(L_eye_T, glm::vec3(Head_Pos[0] - 0.1f, Head_Pos[1] + 0.1f, Head_Pos[2] + 0.2f));
		R_eye_T = glm::translate(R_eye_T, glm::vec3(Head_Pos[0] + 0.1f, Head_Pos[1] + 0.1f, Head_Pos[2] + 0.2f));
		Nose_T = glm::translate(Nose_T, glm::vec3(Head_Pos[0], Head_Pos[1] - 0.1f, Head_Pos[2] + 0.2f));
		Head_TR = glm::translate(Head_TR, glm::vec3(-Head_Pos[0], -Head_Pos[1], -Head_Pos[2]));
		eye_S = glm::scale(eye_S, glm::vec3(0.15f, 0.05f, 0.15f));

		Body_T = glm::translate(Body_T, glm::vec3(Head_Pos[0], Head_Pos[1] - 0.3f, Head_Pos[2]));

		L_Arm_T = glm::translate(L_Arm_T, glm::vec3(Head_Pos[0] - 0.2f, Head_Pos[1] - 0.25f, Head_Pos[2]));
		R_Arm_T = glm::translate(R_Arm_T, glm::vec3(Head_Pos[0] + 0.2f, Head_Pos[1] - 0.25f, Head_Pos[2]));
		L_Leg_T = glm::translate(L_Leg_T, glm::vec3(Head_Pos[0] - 0.1f, Head_Pos[1] - 0.5f, Head_Pos[2]));
		R_Leg_T = glm::translate(R_Leg_T, glm::vec3(Head_Pos[0] + 0.1f, Head_Pos[1] - 0.5f, Head_Pos[2]));
		Arm_S = glm::scale(Arm_S, glm::vec3(0.2f, 1.0f, 0.2f));

		StageS = glm::scale(StageS, glm::vec3(5.0f, 2.0f, 5.0f));
		StageFT = glm::translate(StageFT, glm::vec3(0.0f, timecount, 0.0f));

		// 무대
		glUniformMatrix4fv(modelLoc, 1, GL_FALSE, glm::value_ptr(B_Rotate * StageS));
		glBindVertexArray(VAO[0]);
		glDrawArrays(GL_TRIANGLES, 0, 30);
		// 무대 앞면
		glUniformMatrix4fv(modelLoc, 1, GL_FALSE, glm::value_ptr(B_Rotate * StageS * StageFT));
		glBindVertexArray(VAO[7]);
		glDrawArrays(GL_TRIANGLES, 0, 6);

		// 머리와 부속품
		glUniformMatrix4fv(modelLoc, 1, GL_FALSE, glm::value_ptr(Head_T * B_Scale * Body_R * B_Rotate));
		glBindVertexArray(VAO[1]);
		glDrawArrays(GL_TRIANGLES, 0, 36);
		glUniformMatrix4fv(modelLoc, 1, GL_FALSE, glm::value_ptr(Head_T * Body_R * Head_TR * L_eye_T * B_Scale * eye_S * B_Rotate));
		glBindVertexArray(VAO[8]);
		glDrawArrays(GL_TRIANGLES, 0, 36);
		glUniformMatrix4fv(modelLoc, 1, GL_FALSE, glm::value_ptr(Head_T * Body_R * Head_TR * R_eye_T * B_Scale * eye_S * B_Rotate));
		glBindVertexArray(VAO[9]);
		glDrawArrays(GL_TRIANGLES, 0, 36);
		glUniformMatrix4fv(modelLoc, 1, GL_FALSE, glm::value_ptr(Head_T * Body_R * Head_TR * Nose_T * B_Scale * eye_S * B_Rotate));
		glBindVertexArray(VAO[10]);
		glDrawArrays(GL_TRIANGLES, 0, 36);

		// 몸통
		glUniformMatrix4fv(modelLoc, 1, GL_FALSE, glm::value_ptr(Body_T * B_Scale * Body_R * B_Rotate));
		glBindVertexArray(VAO[2]);
		glDrawArrays(GL_TRIANGLES, 0, 36);

		// 팔과 다리
		glUniformMatrix4fv(modelLoc, 1, GL_FALSE, glm::value_ptr(Head_T * Body_R * Head_TR * L_Arm_T * B_TranRR * Arm_Rotate_cw * B_TranR * B_Scale * Arm_S * B_Rotate));
		glBindVertexArray(VAO[3]);
		glDrawArrays(GL_TRIANGLES, 0, 36);
		glUniformMatrix4fv(modelLoc, 1, GL_FALSE, glm::value_ptr(Head_T * Body_R * Head_TR * R_Arm_T * B_TranRR * Arm_Rotate_ccw * B_TranR * B_Scale * Arm_S * B_Rotate));
		glBindVertexArray(VAO[4]);
		glDrawArrays(GL_TRIANGLES, 0, 36);
		glUniformMatrix4fv(modelLoc, 1, GL_FALSE, glm::value_ptr(Head_T * Body_R * Head_TR * L_Leg_T * B_TranRR * Arm_Rotate_ccw * B_TranR * B_Scale * Arm_S * B_Rotate));
		glBindVertexArray(VAO[5]);
		glDrawArrays(GL_TRIANGLES, 0, 36);
		glUniformMatrix4fv(modelLoc, 1, GL_FALSE, glm::value_ptr(Head_T * Body_R * Head_TR * R_Leg_T * B_TranRR * Arm_Rotate_cw * B_TranR * B_Scale * Arm_S * B_Rotate));
		glBindVertexArray(VAO[6]);
		glDrawArrays(GL_TRIANGLES, 0, 36);

	}

	// 중간 기둥
	{
		glm::mat4 MidT = glm::mat4(1.0f);
		glm::mat4 MidR = glm::mat4(1.0f);
		glm::mat4 MidS = glm::mat4(1.0f);

		MidT = glm::translate(MidT, glm::vec3(0.0f, -0.3f, 0.5f));
		MidR = glm::rotate(MidR, glm::radians(45.0f), glm::vec3(0.0f, 1.0f, 0.0f));
		MidS = glm::scale(MidS, glm::vec3(0.5f, 1.5f, 0.5f));

		glUniformMatrix4fv(modelLoc, 1, GL_FALSE, glm::value_ptr(MidS* MidT* MidR));
		glBindVertexArray(MID);
		glDrawArrays(GL_TRIANGLES, 0, 36);
	}

	// 나무
	{
		GLUquadric* TreeHead;

		glm::mat4 TreeT = glm::mat4(1.0f);
		glm::mat4 TreeR = glm::mat4(1.0f);
		glm::mat4 TreeS = glm::mat4(1.0f);

		TreeT = glm::translate(TreeT, glm::vec3(5.0f, -0.3f, 5.0f));
		TreeR = glm::rotate(TreeR, glm::radians(45.0f), glm::vec3(0.0f, 1.0f, 0.0f));
		TreeS = glm::scale(TreeS, glm::vec3(0.3f, 1.2f, 0.3f));

		glUniformMatrix4fv(modelLoc, 1, GL_FALSE, glm::value_ptr(TreeS * TreeT * TreeR));
		glBindVertexArray(Tree);
		glDrawArrays(GL_TRIANGLES, 0, 36);

		glm::mat4 TreeHT = glm::mat4(1.0f);
		glm::mat4 TreeHS = glm::mat4(1.0f);

		TreeHT = glm::translate(TreeHT, glm::vec3(1.5f, 0.0f, 1.5f));
		TreeHS = glm::scale(TreeHS, glm::vec3(Tree_size, Tree_size, Tree_size));

		glUniformMatrix4fv(modelLoc, 1, GL_FALSE, glm::value_ptr(TreeHT * TreeHS));
		TreeHead = gluNewQuadric();
		gluQuadricDrawStyle(TreeHead, GLU_FILL);
		gluQuadricNormals(TreeHead, GLU_SMOOTH);
		gluQuadricOrientation(TreeHead, GLU_OUTSIDE);
		gluSphere(TreeHead, 1.0, 20, 20);
	}

	// 철봉
	{
		glm::mat4 Ironbar_LT = glm::mat4(1.0f);
		glm::mat4 Ironbar_LR = glm::mat4(1.0f);
		glm::mat4 Ironbar_LS = glm::mat4(1.0f);

		Ironbar_LT = glm::translate(Ironbar_LT, glm::vec3(1.5f, -0.3f, -1.5f));
		Ironbar_LR = glm::rotate(Ironbar_LR, glm::radians(45.0f), glm::vec3(0.0f, 1.0f, 0.0f));
		Ironbar_LS = glm::scale(Ironbar_LS, glm::vec3(0.1f, 1.5f, 0.1f));

		glUniformMatrix4fv(modelLoc, 1, GL_FALSE, glm::value_ptr(Ironbar_LT * Ironbar_LR * Ironbar_LS));
		glBindVertexArray(Ironbar[0]);
		glDrawArrays(GL_TRIANGLES, 0, 36);

		glm::mat4 Ironbar_RT = glm::mat4(1.0f);
		glm::mat4 Ironbar_RR = glm::mat4(1.0f);
		glm::mat4 Ironbar_RS = glm::mat4(1.0f);

		Ironbar_RT = glm::translate(Ironbar_RT, glm::vec3(1.5f, -0.3f, -0.5f));
		Ironbar_RR = glm::rotate(Ironbar_RR, glm::radians(45.0f), glm::vec3(0.0f, 1.0f, 0.0f));
		Ironbar_RS = glm::scale(Ironbar_RS, glm::vec3(0.1f, 1.5f, 0.1f));

		glUniformMatrix4fv(modelLoc, 1, GL_FALSE, glm::value_ptr(Ironbar_RT * Ironbar_RR * Ironbar_RS));
		glBindVertexArray(Ironbar[1]);
		glDrawArrays(GL_TRIANGLES, 0, 36);

		glm::mat4 Ironbar_TT = glm::mat4(1.0f);
		glm::mat4 Ironbar_TR = glm::mat4(1.0f);
		glm::mat4 Ironbar_TS = glm::mat4(1.0f);

		Ironbar_TT = glm::translate(Ironbar_TT, glm::vec3(1.5f, 0.3f, -1.0f));
		Ironbar_TR = glm::rotate(Ironbar_TR, glm::radians(90.0f), glm::vec3(1.0f, 0.0f, 0.0f));
		Ironbar_TS = glm::scale(Ironbar_TS, glm::vec3(0.1f, 1.0f, 0.1f));

		glUniformMatrix4fv(modelLoc, 1, GL_FALSE, glm::value_ptr(Ironbar_TT * Ironbar_TR * Ironbar_TS));
		glBindVertexArray(Ironbar[2]);
		glDrawArrays(GL_TRIANGLES, 0, 36);
	}

	// 벤치
	{
		GLUquadric* dum_1;
		GLUquadric* dum_2;

		glm::mat4 Bench_1T = glm::mat4(1.0f);
		glm::mat4 Bench_1R = glm::mat4(1.0f);
		glm::mat4 Bench_1S = glm::mat4(1.0f);

		Bench_1T = glm::translate(Bench_1T, glm::vec3(-1.5f, -0.5f, -1.5f));
		Bench_1R = glm::rotate(Bench_1R, glm::radians(45.0f), glm::vec3(0.0f, 1.0f, 0.0f));
		Bench_1S = glm::scale(Bench_1S, glm::vec3(0.1f, 1.0f, 0.1f));

		glUniformMatrix4fv(modelLoc, 1, GL_FALSE, glm::value_ptr(Bench_1T * Bench_1R * Bench_1S));
		glBindVertexArray(Bench[0]);
		glDrawArrays(GL_TRIANGLES, 0, 36);

		glm::mat4 Bench_2T = glm::mat4(1.0f);
		glm::mat4 Bench_2R = glm::mat4(1.0f);
		glm::mat4 Bench_2S = glm::mat4(1.0f);

		Bench_2T = glm::translate(Bench_2T, glm::vec3(-1.2f, -0.5f, -1.5f));
		Bench_2R = glm::rotate(Bench_2R, glm::radians(45.0f), glm::vec3(0.0f, 1.0f, 0.0f));
		Bench_2S = glm::scale(Bench_2S, glm::vec3(0.1f, 1.0f, 0.1f));

		glUniformMatrix4fv(modelLoc, 1, GL_FALSE, glm::value_ptr(Bench_2T * Bench_2R * Bench_2S));
		glBindVertexArray(Bench[1]);
		glDrawArrays(GL_TRIANGLES, 0, 36);

		glm::mat4 Bench_3T = glm::mat4(1.0f);
		glm::mat4 Bench_3R = glm::mat4(1.0f);
		glm::mat4 Bench_3S = glm::mat4(1.0f);

		Bench_3T = glm::translate(Bench_3T, glm::vec3(-1.5f, -0.8f, -0.3f));
		Bench_3R = glm::rotate(Bench_3R, glm::radians(45.0f), glm::vec3(0.0f, 1.0f, 0.0f));
		Bench_3S = glm::scale(Bench_3S, glm::vec3(0.1f, 0.5f, 0.1f));

		glUniformMatrix4fv(modelLoc, 1, GL_FALSE, glm::value_ptr(Bench_3T * Bench_3R * Bench_3S));
		glBindVertexArray(Bench[2]);
		glDrawArrays(GL_TRIANGLES, 0, 36);

		glm::mat4 Bench_4T = glm::mat4(1.0f);
		glm::mat4 Bench_4R = glm::mat4(1.0f);
		glm::mat4 Bench_4S = glm::mat4(1.0f);

		Bench_4T = glm::translate(Bench_4T, glm::vec3(-1.2f, -0.8f, -0.3f));
		Bench_4R = glm::rotate(Bench_4R, glm::radians(45.0f), glm::vec3(0.0f, 1.0f, 0.0f));
		Bench_4S = glm::scale(Bench_4S, glm::vec3(0.1f, 0.5f, 0.1f));

		glUniformMatrix4fv(modelLoc, 1, GL_FALSE, glm::value_ptr(Bench_4T * Bench_4R * Bench_4S));
		glBindVertexArray(Bench[3]);
		glDrawArrays(GL_TRIANGLES, 0, 36);

		glm::mat4 Bench_BT = glm::mat4(1.0f);
		glm::mat4 Bench_BR = glm::mat4(1.0f);
		glm::mat4 Bench_BS = glm::mat4(1.0f);

		Bench_BT = glm::translate(Bench_BT, glm::vec3(-1.8f, -0.7f, -0.9f));
		Bench_BR = glm::rotate(Bench_BR, glm::radians(45.0f), glm::vec3(0.0f, 1.0f, 0.0f));
		Bench_BS = glm::scale(Bench_BS, glm::vec3(1.7f, 0.1f, 1.7f));

		glUniformMatrix4fv(modelLoc, 1, GL_FALSE, glm::value_ptr(Bench_BT * Bench_BR * Bench_BS));
		glBindVertexArray(Bench[4]);
		glDrawArrays(GL_TRIANGLES, 0, 36);

		glm::mat4 Bench_BarT = glm::mat4(1.0f);
		glm::mat4 Bench_BarR1 = glm::mat4(1.0f);
		glm::mat4 Bench_BarR2 = glm::mat4(1.0f);
		glm::mat4 Bench_BarS = glm::mat4(1.0f);

		Bench_BarT = glm::translate(Bench_BarT, glm::vec3(-1.3f, dumb_pos[1], -1.2f));
		Bench_BarR1 = glm::rotate(Bench_BarR1, glm::radians(90.0f), glm::vec3(1.0f, 0.0f, 0.0f));
		Bench_BarR2 = glm::rotate(Bench_BarR2, glm::radians(90.0f), glm::vec3(0.0f, 1.0f, 0.0f));
		Bench_BarS = glm::scale(Bench_BarS, glm::vec3(0.1f, 0.7f, 0.1f));

		glUniformMatrix4fv(modelLoc, 1, GL_FALSE, glm::value_ptr(Bench_BarT * Bench_BarR2 * Bench_BarR1 * Bench_BarS));
		glBindVertexArray(Bench[5]);
		glDrawArrays(GL_TRIANGLES, 0, 36);

		glm::mat4 dum1T = glm::mat4(1.0f);
		glm::mat4 dum1S = glm::mat4(1.0f);

		dum1T = glm::translate(dum1T, glm::vec3(dumb_pos[0] - 0.3f, dumb_pos[1], dumb_pos[2]));
		dum1S = glm::scale(dum1S, glm::vec3(0.1f, 0.3f, 0.1f));

		glUniformMatrix4fv(modelLoc, 1, GL_FALSE, glm::value_ptr(dum1T * dum1S));
		dum_1 = gluNewQuadric();
		gluQuadricDrawStyle(dum_1, GLU_LINE);
		gluQuadricNormals(dum_1, GLU_SMOOTH);
		gluQuadricOrientation(dum_1, GLU_OUTSIDE);
		gluSphere(dum_1, 1.0, 20, 20);

		glm::mat4 dum2T = glm::mat4(1.0f);
		glm::mat4 dum2S = glm::mat4(1.0f);

		dum2T = glm::translate(dum2T, glm::vec3(dumb_pos[0] + 0.3f, dumb_pos[1], dumb_pos[2]));
		dum2S = glm::scale(dum2S, glm::vec3(0.1f, 0.3f, 0.1f));

		glUniformMatrix4fv(modelLoc, 1, GL_FALSE, glm::value_ptr(dum2T * dum2S));
		dum_2 = gluNewQuadric();
		gluQuadricDrawStyle(dum_1, GLU_LINE);
		gluQuadricNormals(dum_1, GLU_SMOOTH);
		gluQuadricOrientation(dum_1, GLU_OUTSIDE);
		gluSphere(dum_1, 1.0, 20, 20);

	}

	
	// 런닝머신
	{
		{
			GLUquadric* run_sphere;

			glm::mat4 Running_1T = glm::mat4(1.0f);
			glm::mat4 Running_1R_1 = glm::mat4(1.0f);
			glm::mat4 Running_1R_2 = glm::mat4(1.0f);
			glm::mat4 Running_1S = glm::mat4(1.0f);

			Running_1T = glm::translate(Running_1T, glm::vec3(-1.0f, -1.0f, 1.3f));
			Running_1R_1 = glm::rotate(Running_1R_1, glm::radians(45.0f), glm::vec3(0.0f, 1.0f, 0.0f));
			Running_1R_2 = glm::rotate(Running_1R_2, glm::radians(90.0f), glm::vec3(0.0f, 0.0f, 1.0f));
			Running_1S = glm::scale(Running_1S, glm::vec3(0.1f, 1.5f, 0.8f));

			glUniformMatrix4fv(modelLoc, 1, GL_FALSE, glm::value_ptr(Running_1T * Running_1R_2 * Running_1S * Running_1R_1));
			glBindVertexArray(Running[0]);
			glDrawArrays(GL_TRIANGLES, 0, 36);

			glm::mat4 Running_2T = glm::mat4(1.0f);
			glm::mat4 Running_2R = glm::mat4(1.0f);
			glm::mat4 Running_2S = glm::mat4(1.0f);

			Running_2T = glm::translate(Running_2T, glm::vec3(-1.7f, -0.7f, 1.6f));
			Running_2R = glm::rotate(Running_2R, glm::radians(45.0f), glm::vec3(0.0f, 1.0f, 0.0f));
			Running_2S = glm::scale(Running_2S, glm::vec3(0.1f, 0.8f, 0.1f));

			glUniformMatrix4fv(modelLoc, 1, GL_FALSE, glm::value_ptr(Running_2T * Running_2R * Running_2S));
			glBindVertexArray(Running[1]);
			glDrawArrays(GL_TRIANGLES, 0, 36);

			glm::mat4 Running_3T = glm::mat4(1.0f);
			glm::mat4 Running_3R = glm::mat4(1.0f);
			glm::mat4 Running_3S = glm::mat4(1.0f);

			Running_3T = glm::translate(Running_3T, glm::vec3(-1.7f, -0.7f, 1.0f));
			Running_3R = glm::rotate(Running_3R, glm::radians(45.0f), glm::vec3(0.0f, 1.0f, 0.0f));
			Running_3S = glm::scale(Running_3S, glm::vec3(0.1f, 0.8f, 0.1f));

			glUniformMatrix4fv(modelLoc, 1, GL_FALSE, glm::value_ptr(Running_3T * Running_3R * Running_3S));
			glBindVertexArray(Running[2]);
			glDrawArrays(GL_TRIANGLES, 0, 36);

			glm::mat4 Running_4T = glm::mat4(1.0f);
			glm::mat4 Running_4R = glm::mat4(1.0f);
			glm::mat4 Running_4S = glm::mat4(1.0f);

			Running_4T = glm::translate(Running_4T, glm::vec3(-1.6f, -0.3f, 1.3f));
			Running_4R = glm::rotate(Running_4R, glm::radians(45.0f), glm::vec3(0.0f, 1.0f, 0.0f));
			Running_4S = glm::scale(Running_4S, glm::vec3(0.3f, 0.1f, 1.2f));

			glUniformMatrix4fv(modelLoc, 1, GL_FALSE, glm::value_ptr(Running_4T * Running_4S * Running_4R));
			glBindVertexArray(Running[3]);
			glDrawArrays(GL_TRIANGLES, 0, 36);

			glm::mat4 run_sphereT = glm::mat4(1.0f);
			glm::mat4 run_sphereR_1 = glm::mat4(1.0f);
			glm::mat4 run_sphereR_2 = glm::mat4(1.0f);
			glm::mat4 run_sphereR_3 = glm::mat4(1.0f);
			glm::mat4 run_sphereS = glm::mat4(1.0f);

			run_sphereT = glm::translate(run_sphereT, glm::vec3(-0.8f, -0.95f, 1.6f));
			run_sphereR_1 = glm::rotate(run_sphereR_1, glm::radians(run_rad), glm::vec3(0.0f, 0.0f, 1.0f));
			run_sphereR_2 = glm::rotate(run_sphereR_2, glm::radians(90.0f), glm::vec3(0.0f, 1.0f, 0.0f));
			run_sphereR_3 = glm::rotate(run_sphereR_3, glm::radians(90.0f), glm::vec3(0.0f, 1.0f, 0.0f));
			run_sphereS = glm::scale(run_sphereS, glm::vec3(0.8f, 0.05f, 0.5f));

			glUniformMatrix4fv(modelLoc, 1, GL_FALSE, glm::value_ptr(run_sphereT * run_sphereR_3 * run_sphereR_2 * run_sphereS * run_sphereR_1));
			run_sphere = gluNewQuadric();
			gluQuadricDrawStyle(run_sphere, GLU_LINE);
			gluQuadricNormals(run_sphere, GLU_SMOOTH);
			gluQuadricOrientation(run_sphere, GLU_OUTSIDE);
			gluCylinder(run_sphere, 1.0, 1.0, 1, 20, 1);

		}
	}

	// 철봉 사람
	{
		glm::mat4 iron_pos_T = glm::mat4(1.0f);

		glm::mat4 iron_all_T = glm::mat4(1.0f);
		glm::mat4 iron_all_R = glm::mat4(1.0f);
		glm::mat4 iron_all_TR = glm::mat4(1.0f);

		iron_all_T = glm::translate(iron_all_T, glm::vec3(0.0f,-0.9f,0.0f));
		iron_all_TR = glm::translate(iron_all_TR, glm::vec3(0.0f, 0.9f, 0.0f));
		iron_all_R = glm::rotate(iron_all_R, glm::radians(ironbar_rad), glm::vec3(0.0f, 0.0f, 1.0f));

		glm::mat4 iron_all = glm::mat4(1.0f);
		iron_all = iron_all_TR * iron_all_R * iron_all_T;

		glm::mat4 iron_bodyT = glm::mat4(1.0f);
		glm::mat4 iron_bodyR = glm::mat4(1.0f);
		glm::mat4 iron_bodyS = glm::mat4(1.0f);

		glm::mat4 iron_bodyRR = glm::mat4(1.0f);

		iron_pos_T = glm::translate(iron_pos_T, glm::vec3(iron_body_pos[0], iron_body_pos[1], iron_body_pos[2]));

		iron_bodyT = glm::translate(iron_bodyT, glm::vec3(0.0f, 0.3f, 0.0f));
		iron_bodyR = glm::rotate(iron_bodyR, glm::radians(45.0f), glm::vec3(0.0f, 1.0f, 0.0f));
		iron_bodyRR = glm::rotate(iron_bodyRR, glm::radians(90.0f), glm::vec3(0.0f, 1.0f, 0.0f));
		iron_bodyS = glm::scale(iron_bodyS, glm::vec3(0.5f, 0.5f, 0.2f));

		glUniformMatrix4fv(modelLoc, 1, GL_FALSE, glm::value_ptr(iron_pos_T * iron_all* iron_bodyRR * iron_bodyT * iron_bodyS * iron_bodyR));
		glBindVertexArray(iron_human[0]);
		glDrawArrays(GL_TRIANGLES, 0, 36);

		glm::mat4 iron_LarmT = glm::mat4(1.0f);
		glm::mat4 iron_LarmR = glm::mat4(1.0f);
		glm::mat4 iron_LarmS = glm::mat4(1.0f);

		iron_LarmT = glm::translate(iron_LarmT, glm::vec3(-0.2f, 0.7f, 0.0f));
		iron_LarmR = glm::rotate(iron_LarmR, glm::radians(45.0f), glm::vec3(0.0f, 1.0f, 0.0f));
		iron_LarmS = glm::scale(iron_LarmS, glm::vec3(0.1f, 0.5f, 0.1f));

		glUniformMatrix4fv(modelLoc, 1, GL_FALSE, glm::value_ptr(iron_pos_T * iron_all* iron_bodyRR * iron_LarmT* iron_LarmS * iron_LarmR));
		glBindVertexArray(iron_human[1]);
		glDrawArrays(GL_TRIANGLES, 0, 36);

		glm::mat4 iron_RarmT = glm::mat4(1.0f);
		glm::mat4 iron_RarmR = glm::mat4(1.0f);
		glm::mat4 iron_RarmS = glm::mat4(1.0f);

		iron_RarmT = glm::translate(iron_RarmT, glm::vec3(0.2f, 0.7f, 0.0f));
		iron_RarmR = glm::rotate(iron_RarmR, glm::radians(45.0f), glm::vec3(0.0f, 1.0f, 0.0f));
		iron_RarmS = glm::scale(iron_RarmS, glm::vec3(0.1f, 0.5f, 0.1f));

		glUniformMatrix4fv(modelLoc, 1, GL_FALSE, glm::value_ptr(iron_pos_T * iron_all* iron_bodyRR* iron_RarmT* iron_RarmS* iron_RarmR));
		glBindVertexArray(iron_human[2]);
		glDrawArrays(GL_TRIANGLES, 0, 36);

		glm::mat4 iron_LlegT = glm::mat4(1.0f);
		glm::mat4 iron_LlegR = glm::mat4(1.0f);
		glm::mat4 iron_LlegS = glm::mat4(1.0f);

		iron_LlegT = glm::translate(iron_LlegT, glm::vec3(-0.1, -0.2f, 0.0f));
		iron_LlegR = glm::rotate(iron_LlegR, glm::radians(45.0f), glm::vec3(0.0f, 1.0f, 0.0f));
		iron_LlegS = glm::scale(iron_LlegS, glm::vec3(0.1f, 0.5f, 0.1f));

		glUniformMatrix4fv(modelLoc, 1, GL_FALSE, glm::value_ptr(iron_pos_T * iron_all * iron_bodyRR* iron_LlegT* iron_LlegS* iron_LlegR));
		glBindVertexArray(iron_human[3]);
		glDrawArrays(GL_TRIANGLES, 0, 36);

		glm::mat4 iron_RlegT = glm::mat4(1.0f);
		glm::mat4 iron_RlegR = glm::mat4(1.0f);
		glm::mat4 iron_RlegS = glm::mat4(1.0f);

		iron_RlegT = glm::translate(iron_RlegT, glm::vec3(0.1f, -0.2f, 0.0f));
		iron_RlegR = glm::rotate(iron_RlegR, glm::radians(45.0f), glm::vec3(0.0f, 1.0f, 0.0f));
		iron_RlegS = glm::scale(iron_RlegS, glm::vec3(0.1f, 0.5f, 0.1f));

		glUniformMatrix4fv(modelLoc, 1, GL_FALSE, glm::value_ptr(iron_pos_T * iron_all* iron_bodyRR* iron_RlegT* iron_RlegS* iron_RlegR));
		glBindVertexArray(iron_human[4]);
		glDrawArrays(GL_TRIANGLES, 0, 36);
	}

	// 벤치 사람
	{
		glm::mat4 bench_arm_R1 = glm::mat4(1.0f);
		glm::mat4 bench_arm_R2 = glm::mat4(1.0f);

		bench_arm_R1 = glm::rotate(bench_arm_R1, glm::radians(Bench_rad), glm::vec3(0.0f, 0.0f, 1.0f));
		bench_arm_R2 = glm::rotate(bench_arm_R2, glm::radians(-Bench_rad), glm::vec3(0.0f, 0.0f, 1.0f));


		glm::mat4 bench_arm_1 = glm::mat4(1.0f);
		glm::mat4 bench_arm_2 = glm::mat4(1.0f);
		 
		bench_arm_1 = bench_arm_R1;
		bench_arm_2 = bench_arm_R2;

		glm::mat4 bench_T = glm::mat4(1.0f);
		glm::mat4 bench_R = glm::mat4(1.0f);

		bench_T = glm::translate(bench_T, glm::vec3(bench_body_pos[0], bench_body_pos[1], bench_body_pos[2]));
		bench_R = glm::rotate(bench_R, glm::radians(90.0f), glm::vec3(1.0f, 0.0f, 0.0f));

		glm::mat4 bench_bodyT = glm::mat4(1.0f);
		glm::mat4 bench_bodyR = glm::mat4(1.0f);
		glm::mat4 bench_bodyS = glm::mat4(1.0f);

		bench_bodyT = glm::translate(bench_bodyT, glm::vec3(0.0f,0.3f,0.0f));
		bench_bodyR = glm::rotate(bench_bodyR, glm::radians(45.0f), glm::vec3(0.0f, 1.0f, 0.0f));
		bench_bodyS = glm::scale(bench_bodyS, glm::vec3(0.5f, 0.7f, 0.2f));

		glUniformMatrix4fv(modelLoc, 1, GL_FALSE, glm::value_ptr(bench_T * bench_R * bench_bodyT * bench_bodyS * bench_bodyR));
		glBindVertexArray(Bench_human[0]);
		glDrawArrays(GL_TRIANGLES, 0, 36);

		glm::mat4 bench_LarmT_1 = glm::mat4(1.0f);
		glm::mat4 bench_LarmR_1 = glm::mat4(1.0f);
		glm::mat4 bench_LarmS_1 = glm::mat4(1.0f);

		bench_LarmT_1 = glm::translate(bench_LarmT_1, glm::vec3(-0.2f,0.05f,0.0f));
		bench_LarmR_1 = glm::rotate(bench_LarmR_1, glm::radians(45.0f), glm::vec3(0.0f, 1.0f, 0.0f));
		bench_LarmS_1 = glm::scale(bench_LarmS_1, glm::vec3(0.1f, 0.2f, 0.1f));

		glUniformMatrix4fv(modelLoc, 1, GL_FALSE, glm::value_ptr(bench_T* bench_LarmT_1* bench_arm_1 * bench_LarmS_1* bench_LarmR_1));
		glBindVertexArray(Bench_human[1]);
		glDrawArrays(GL_TRIANGLES, 0, 36);

		glm::mat4 bench_RarmT_1 = glm::mat4(1.0f);
		glm::mat4 bench_RarmR_1 = glm::mat4(1.0f);
		glm::mat4 bench_RarmS_1 = glm::mat4(1.0f);

		bench_RarmT_1 = glm::translate(bench_RarmT_1, glm::vec3(0.2f, 0.05f, 0.0f));
		bench_RarmR_1 = glm::rotate(bench_RarmR_1, glm::radians(45.0f), glm::vec3(0.0f, 1.0f, 0.0f));
		bench_RarmS_1 = glm::scale(bench_RarmS_1, glm::vec3(0.1f, 0.2f, 0.1f));

		glUniformMatrix4fv(modelLoc, 1, GL_FALSE, glm::value_ptr(bench_T* bench_RarmT_1* bench_arm_2 * bench_RarmS_1* bench_RarmR_1));
		glBindVertexArray(Bench_human[2]);
		glDrawArrays(GL_TRIANGLES, 0, 36);

		glm::mat4 bench_LarmT_2 = glm::mat4(1.0f);
		glm::mat4 bench_LarmR_2 = glm::mat4(1.0f);
		glm::mat4 bench_LarmS_2 = glm::mat4(1.0f);

		bench_LarmT_2 = glm::translate(bench_LarmT_2, glm::vec3(-0.2f, 0.2f, 0.0f));
		bench_LarmR_2 = glm::rotate(bench_LarmR_2, glm::radians(45.0f), glm::vec3(0.0f, 1.0f, 0.0f));
		bench_LarmS_2 = glm::scale(bench_LarmS_2, glm::vec3(0.1f, 0.2f, 0.1f));

		glUniformMatrix4fv(modelLoc, 1, GL_FALSE, glm::value_ptr(bench_T* bench_LarmT_2* bench_arm_2 * bench_LarmS_2* bench_LarmR_2));
		glBindVertexArray(Bench_human[3]);
		glDrawArrays(GL_TRIANGLES, 0, 36);

		glm::mat4 bench_RarmT_2 = glm::mat4(1.0f);
		glm::mat4 bench_RarmR_2 = glm::mat4(1.0f);
		glm::mat4 bench_RarmS_2 = glm::mat4(1.0f);

		bench_RarmT_2 = glm::translate(bench_RarmT_2, glm::vec3(0.2f, 0.2f, 0.0f));
		bench_RarmR_2 = glm::rotate(bench_RarmR_2, glm::radians(45.0f), glm::vec3(0.0f, 1.0f, 0.0f));
		bench_RarmS_2 = glm::scale(bench_RarmS_2, glm::vec3(0.1f, 0.2f, 0.1f));

		glUniformMatrix4fv(modelLoc, 1, GL_FALSE, glm::value_ptr(bench_T* bench_RarmT_2* bench_arm_1 *  bench_RarmS_2* bench_RarmR_2));
		glBindVertexArray(Bench_human[4]);
		glDrawArrays(GL_TRIANGLES, 0, 36);

		glm::mat4 bench_LlegT = glm::mat4(1.0f);
		glm::mat4 bench_LlegR = glm::mat4(1.0f);
		glm::mat4 bench_LlegS = glm::mat4(1.0f);

		bench_LlegT = glm::translate(bench_LlegT, glm::vec3(-0.1f,0.7f,0.0f));
		bench_LlegR = glm::rotate(bench_LlegR, glm::radians(45.0f), glm::vec3(0.0f, 1.0f, 0.0f));
		bench_LlegS = glm::scale(bench_LlegS, glm::vec3(0.1f, 0.4f, 0.1f));

		glUniformMatrix4fv(modelLoc, 1, GL_FALSE, glm::value_ptr(bench_T* bench_R* bench_LlegT* bench_LlegS* bench_LlegR));
		glBindVertexArray(Bench_human[5]);
		glDrawArrays(GL_TRIANGLES, 0, 36);

		glm::mat4 bench_RlegT = glm::mat4(1.0f);
		glm::mat4 bench_RlegR = glm::mat4(1.0f);
		glm::mat4 bench_RlegS = glm::mat4(1.0f);

		bench_RlegT = glm::translate(bench_RlegT, glm::vec3(0.1f, 0.7f, 0.0f));
		bench_RlegR = glm::rotate(bench_RlegR, glm::radians(45.0f), glm::vec3(0.0f, 1.0f, 0.0f));
		bench_RlegS = glm::scale(bench_RlegS, glm::vec3(0.1f, 0.4f, 0.1f));

		glUniformMatrix4fv(modelLoc, 1, GL_FALSE, glm::value_ptr(bench_T* bench_R* bench_RlegT* bench_RlegS* bench_RlegR));
		glBindVertexArray(Bench_human[6]);
		glDrawArrays(GL_TRIANGLES, 0, 36);
	}

	// 런닝 사람
	{
		glm::mat4 iron_pos_T = glm::mat4(1.0f);

		glm::mat4 iron_arm_T = glm::mat4(1.0f);
		glm::mat4 iron_arm_R = glm::mat4(1.0f);
		glm::mat4 iron_arm_RR = glm::mat4(1.0f);
		glm::mat4 iron_arm_TR = glm::mat4(1.0f);

		iron_arm_T = glm::translate(iron_arm_T, glm::vec3(0.0f, -0.9f, 0.0f));
		iron_arm_TR = glm::translate(iron_arm_TR, glm::vec3(0.0f, 0.9f, 0.0f));
		iron_arm_R = glm::rotate(iron_arm_R, glm::radians(Arm_R_count), glm::vec3(0.0f, 0.0f, 1.0f));
		iron_arm_RR = glm::rotate(iron_arm_RR, glm::radians(-Arm_R_count), glm::vec3(0.0f, 0.0f, 1.0f));

		glm::mat4 iron_all1 = glm::mat4(1.0f);
		glm::mat4 iron_all2 = glm::mat4(1.0f);
		iron_all1 = iron_arm_TR * iron_arm_R * iron_arm_T;
		iron_all2 = iron_arm_TR * iron_arm_RR * iron_arm_T;

		glm::mat4 iron_bodyT = glm::mat4(1.0f);
		glm::mat4 iron_bodyR = glm::mat4(1.0f);
		glm::mat4 iron_bodyS = glm::mat4(1.0f);

		glm::mat4 iron_bodyRR = glm::mat4(1.0f);

		iron_pos_T = glm::translate(iron_pos_T, glm::vec3(running_body_pos[0], running_body_pos[1], running_body_pos[2]));

		iron_bodyT = glm::translate(iron_bodyT, glm::vec3(0.0f, 0.3f, 0.0f));
		iron_bodyR = glm::rotate(iron_bodyR, glm::radians(45.0f), glm::vec3(0.0f, 1.0f, 0.0f));
		iron_bodyRR = glm::rotate(iron_bodyRR, glm::radians(90.0f), glm::vec3(0.0f, 1.0f, 0.0f));
		iron_bodyS = glm::scale(iron_bodyS, glm::vec3(0.5f, 0.5f, 0.2f));

		glUniformMatrix4fv(modelLoc, 1, GL_FALSE, glm::value_ptr(iron_pos_T * iron_bodyRR* iron_bodyT* iron_bodyS* iron_bodyR));
		glBindVertexArray(Running_human[0]);
		glDrawArrays(GL_TRIANGLES, 0, 36);

		glm::mat4 iron_LarmT = glm::mat4(1.0f);
		glm::mat4 iron_LarmR = glm::mat4(1.0f);
		glm::mat4 iron_LarmS = glm::mat4(1.0f);

		iron_LarmT = glm::translate(iron_LarmT, glm::vec3(-0.2f, 0.3f, 0.0f));
		iron_LarmR = glm::rotate(iron_LarmR, glm::radians(45.0f), glm::vec3(0.0f, 1.0f, 0.0f));
		iron_LarmS = glm::scale(iron_LarmS, glm::vec3(0.1f, 0.5f, 0.1f));

		glUniformMatrix4fv(modelLoc, 1, GL_FALSE, glm::value_ptr(iron_pos_T* iron_all1* iron_bodyRR* iron_LarmT* iron_LarmS* iron_LarmR));
		glBindVertexArray(Running_human[1]);
		glDrawArrays(GL_TRIANGLES, 0, 36);

		glm::mat4 iron_RarmT = glm::mat4(1.0f);
		glm::mat4 iron_RarmR = glm::mat4(1.0f);
		glm::mat4 iron_RarmS = glm::mat4(1.0f);

		iron_RarmT = glm::translate(iron_RarmT, glm::vec3(0.2f, 0.3f, 0.0f));
		iron_RarmR = glm::rotate(iron_RarmR, glm::radians(45.0f), glm::vec3(0.0f, 1.0f, 0.0f));
		iron_RarmS = glm::scale(iron_RarmS, glm::vec3(0.1f, 0.5f, 0.1f));

		glUniformMatrix4fv(modelLoc, 1, GL_FALSE, glm::value_ptr(iron_pos_T* iron_all2* iron_bodyRR* iron_RarmT* iron_RarmS* iron_RarmR));
		glBindVertexArray(Running_human[2]);
		glDrawArrays(GL_TRIANGLES, 0, 36);

		glm::mat4 iron_LlegT = glm::mat4(1.0f);
		glm::mat4 iron_LlegR = glm::mat4(1.0f);
		glm::mat4 iron_LlegS = glm::mat4(1.0f);

		iron_LlegT = glm::translate(iron_LlegT, glm::vec3(-0.1, -0.2f, 0.0f));
		iron_LlegR = glm::rotate(iron_LlegR, glm::radians(45.0f), glm::vec3(0.0f, 1.0f, 0.0f));
		iron_LlegS = glm::scale(iron_LlegS, glm::vec3(0.1f, 0.5f, 0.1f));

		glUniformMatrix4fv(modelLoc, 1, GL_FALSE, glm::value_ptr(iron_pos_T* iron_all1* iron_bodyRR* iron_LlegT* iron_LlegS* iron_LlegR));
		glBindVertexArray(Running_human[3]);
		glDrawArrays(GL_TRIANGLES, 0, 36);

		glm::mat4 iron_RlegT = glm::mat4(1.0f);
		glm::mat4 iron_RlegR = glm::mat4(1.0f);
		glm::mat4 iron_RlegS = glm::mat4(1.0f);

		iron_RlegT = glm::translate(iron_RlegT, glm::vec3(0.1f, -0.2f, 0.0f));
		iron_RlegR = glm::rotate(iron_RlegR, glm::radians(45.0f), glm::vec3(0.0f, 1.0f, 0.0f));
		iron_RlegS = glm::scale(iron_RlegS, glm::vec3(0.1f, 0.5f, 0.1f));

		glUniformMatrix4fv(modelLoc, 1, GL_FALSE, glm::value_ptr(iron_pos_T* iron_all2* iron_bodyRR* iron_RlegT* iron_RlegS* iron_RlegR));
		glBindVertexArray(Running_human[4]);
		glDrawArrays(GL_TRIANGLES, 0, 36);
	}

	glutSwapBuffers(); // 화면에 출력하기
}
GLvoid Reshape(int w, int h) //--- 콜백 함수: 다시 그리기 콜백 함수
{
	glViewport(0, 0, w, h);
}

bool openF = false;

bool Move_b = false;
int Move = 0;
bool jump = false;

bool arm_R_b = false;

bool Treesizing = false;

bool runningmove = false;

bool ironbar_man_move = false;

int benchmove = 0;

void Keyboard(unsigned char key, int x, int y)
{
	switch (key) {
	case 'h':
		ironbar_man_move = !ironbar_man_move;
		break;
	case 'v':
		runningmove = !runningmove;
		break;
	case 'b':
		benchmove = 1;
		break;
	case 't':
		Treesizing = !Treesizing;
		break;
	case 'o':
		if (openF == true)
			openF = false;
		else
			openF = true;
		break;

	case 'w':
		Move_b = true;
		Move = M_up;
		break;
	case 's':
		Move_b = true;
		Move = M_down;
		break;
	case 'a':
		Move_b = true;
		Move = M_left;
		break;
	case 'd':
		Move_b = true;
		Move = M_right;
		break;

	case 'j':
		if (jump == false)
			jump = true;
		break;
	case 'i':
		timecount = 0;
		Head_Pos[0] = 0.0f;
		Head_Pos[1] = 0.5f;
		Head_Pos[2] = 0.0f;

		Cam_x = 0.0f;
		Cam_y = 0.0f;
		Cam_z = 5.0f;

		lookPos[0] = 0.0f;
		lookPos[1] = 0.0f;
		lookPos[2] = 0.0f;

		Angle = 0;
		Angle2 = 0;

		openF = false;

		Move_b = false;
		Move = 0;
		jump = false;
		break;

	case 'z':
		Cam_z -= 0.2f;
		break;
	case 'Z':
		Cam_z += 0.2f;
		break;
	case 'y':
		Angle2 += 0.2f;
		break;
	case 'Y':
		Angle2 -= 0.2f;
		break;
	case 'r':
		Angle += 0.2f;
		Cam_x = glm::cos(Angle) * 5;
		Cam_z = glm::sin(Angle) * 5;
		break;
	case 'R':
		Angle -= 0.2f;
		Cam_x = glm::cos(Angle) * 5;
		Cam_z = glm::sin(Angle) * 5;
		break;
	case 'm':
		Cam_y += 0.1f;
		break;
	case 'n':
		Cam_y -= 0.1f;
		break;
	case 'q':
		exit(EXIT_FAILURE);
		break;
	}
	glutPostRedisplay(); //--- 배경색이 바뀔때마다 출력 콜백함수를 호출하여 화면을 refresh 한다
}

void Timer(int value)
{
	// 문열림
	if (openF == true)
	{
		if (timecount < 10)
			timecount += 0.05f;
	}
	else
	{
		if (timecount >= 0)
			timecount -= 0.05f;
	}

	// 사람 이동 
	if (Move_b == true)
	{
		if (Move == M_up)
		{
			if (Body_R_count < 180.0f)
				Body_R_count += 5.0f;
			Head_Pos[2] -= 0.05f;
			if (Head_Pos[2] > 0.5f && Head_Pos[2] < 0.8f && Head_Pos[0] < 0.5f && Head_Pos[0] > -0.5f)
				Move = M_down;
			if (Head_Pos[2] < -1.5f)
				Move = M_down;
		}
		else if (Move == M_down)
		{
			if (Body_R_count > 0.0f)
				Body_R_count -= 5.0f;
			Head_Pos[2] += 0.05f;
			if (Head_Pos[2] > -0.2f && Head_Pos[2] < 0.5f && Head_Pos[0] < 0.5f && Head_Pos[0] > -0.5f)
				Move = M_up;
			if (Head_Pos[2] > 1.5f)
				Move = M_up;
		}
		else if (Move == M_left)
		{
			if (Body_R_count > -90.0f)
				Body_R_count -= 5.0f;
			Head_Pos[0] -= 0.05f;
			if (Head_Pos[2] > -0.2f && Head_Pos[2] < 0.8f && Head_Pos[0] < 0.5f && Head_Pos[0] > -0.5f)
				Move = M_right;
			if (Head_Pos[0] < -1.5f)
				Move = M_right;
		}
		else if (Move == M_right)
		{
			if (Body_R_count < 90.0f)
				Body_R_count += 5.0f;
			Head_Pos[0] += 0.05f;
			if (Head_Pos[2] > -0.2f && Head_Pos[2] < 0.8f && Head_Pos[0] < 0.5f && Head_Pos[0] > -0.5f)
				Move = M_left;
			if (Head_Pos[0] > 1.5f)
				Move = M_left;
		}
		if (arm_R_b == false)
		{
			Arm_R_count += 3.0f;
			if (Arm_R_count >= 30.0f)
				arm_R_b = true;
		}
		else
		{
			Arm_R_count -= 3.0f;
			if (Arm_R_count <= -30.0f)
				arm_R_b = false;
		}
	}
	// 사람 점프
	if (jump == true)
	{
		Head_Pos[1] += 0.05f;
		if (Head_Pos[1] > 0.5f)
			jump = false;
	}
	else if (jump == false)
	{
		if (Head_Pos[1] > -0.3f)
			Head_Pos[1] -= 0.05f;
	}

	// 나무 크기
	if (Treesizing == true)
	{
		if(Tree_size < 1.0f)
			Tree_size += 0.01;
	}
	else
	{
		if (Tree_size > 0.5f)
			Tree_size -= 0.01;
	}

	// 역기 움직임
	if (benchmove == 1)
	{
		Bench_rad += 2.0f;

		dumb_pos[1] -= 0.005f;
		if (dumb_pos[1] < -0.4f)
			benchmove = 2;
	}
	else if (benchmove == 2)
	{
		Bench_rad -= 2.0f;

		dumb_pos[1] += 0.005f;
		if (dumb_pos[1] > -0.3f)
			benchmove = 1;
	}

	// 런닝 움직임
	if (runningmove == true)
	{
		run_rad += 1.0f;
	}

	// 철봉 사람 움직임
	if (ironbar_man_move == true)
	{
		ironbar_rad += 5.0f;

	}

	InitBuffer();
	glutPostRedisplay();
	glutTimerFunc(30, Timer, 1);
}
